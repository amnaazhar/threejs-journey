{"ast":null,"code":"import { Scene, PerspectiveCamera, DirectionalLight, Mesh, MeshBasicMaterial, Vector3, PCFSoftShadowMap, Color, Group, BoxGeometry, CapsuleGeometry, SphereGeometry, CircleGeometry, ConeGeometry, Clock, WebGLRenderer, TextureLoader, BufferGeometry, BufferAttribute, CylinderGeometry, MeshPhongMaterial, DoubleSide, AmbientLight, PointLight, PlaneGeometry } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport GUI from 'lil-gui';\n\nclass WebGLApp {\n  constructor(parent) {\n    this.resize = (width, height) => {\n      this.camera.aspect = width / height;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(width, height);\n    };\n\n    this.addLights = () => {\n      this.createAmbientLight();\n      this.createPointLight();\n    };\n\n    this.createAmbientLight = () => {\n      this.ambientLight = new AmbientLight(0x999999, 1);\n      this.scene.add(this.ambientLight);\n    };\n\n    this.createPointLight = () => {\n      this.light = new PointLight(0xffffff, 0.3, 0);\n      this.light.castShadow = true;\n      this.light.shadow.mapSize.width = 5000;\n      this.light.shadow.mapSize.height = 5000;\n      this.light.position.set(0, 20, -5);\n      this.scene.add(this.light);\n      const light = new PointLight(0xffffff, 0.2, 0);\n      light.castShadow = false;\n      light.position.set(0, 30, 50);\n      this.scene.add(light);\n    };\n\n    this.animate = () => {\n      if (this.sphere != null) {\n        var x = Math.ceil((this.sphere.position.x + window.innerWidth / 4) / this.resolution) - 1;\n        var y = Math.ceil((this.sphere.position.y + window.innerHeight / 4) / this.resolution) - 1;\n        var temp = this.array_of_boxes[x][y]; //console.log(this.array_of_boxes)\n\n        temp.material.color = new Color(0xff0000);\n        temp.material.needsUpdate = true;\n      }\n\n      this.renderer.render(this.scene, this.camera);\n      requestAnimationFrame(this.animate);\n      this.controls.update();\n    };\n\n    this.makeScene = () => {\n      this.addLights(); // const gui = new GUI;\n\n      /*\n      In pseudocode, that's something like:\n       // starting point x = 500 y = 100\n      begin_curve()\n      for (n in [0..num_steps]) {\n          draw_vertex(x, y)\n          x_offset = x - left_x     y_offset = y - top_y\n          column_index = int(x_offset / resolution)     row_index = int(y_offset / resolution)\n          // NOTE: normally you want to check the bounds here     grid_angle = grid[column_index][row_index]\n          x_step = step_length * cos(grid_angle)     y_step = step_length * sin(grid_angle)\n          x = x + x_step     y = y + y_step }\n      end_curve()\n      */\n\n      var res = 50;\n      this.resolution = res;\n      const width = window.innerWidth / 2;\n      const height = window.innerHeight / 2;\n      var value;\n      this.array_of_boxes = new Array();\n      this.sphere = new Mesh(new SphereGeometry(10, 10, 32), new MeshBasicMaterial({\n        color: 0x0000ff\n      }));\n      this.sphere.position.set(100, 200, 0);\n      this.scene.add(this.sphere);\n      var boundaryBox = new Mesh(new BoxGeometry(width, height, 1), new MeshBasicMaterial({\n        color: 0x000000,\n        wireframe: true\n      }));\n      boundaryBox.position.set(0, 0, 10);\n      this.scene.add(boundaryBox);\n\n      for (var x = 0; x < width; x += res) {\n        //console.log(x/res)\n        this.array_of_boxes[x / res] = new Array();\n\n        for (var y = 0; y < height; y += res) {\n          value = (x + y) * 0.01 * Math.PI * 2;\n          var cube = new Mesh(new BoxGeometry(res, res, 1), new MeshBasicMaterial({\n            color: 0x00ff00,\n            wireframe: true\n          }));\n          cube.position.set(x - width / 2, y - height / 2, 10);\n          this.scene.add(cube);\n          this.array_of_boxes[x / res][y / res] = cube;\n        }\n      }\n\n      console.log(this.array_of_boxes.length); // //scene\n      // gui\n      // .addColor(this.params, 'backgroundColor')\n      // .onChange(()=>{\n      //     this.scene.background.set(this.params.backgroundColor)\n      // })\n      // gui.close()\n      // this.scene.add(gui)\n    };\n\n    this.makeGUI = (gui, folderName, obj) => {\n      //gui face\n      const objGUI = gui.addFolder(folderName);\n      objGUI.add(obj.position, 'x').min(-10).max(10).step(0.01);\n      objGUI.add(obj.position, 'y').min(-10).max(10).step(0.01);\n      objGUI.add(obj.position, 'z').min(-Math.PI).max(Math.PI).step(0.01);\n      objGUI.add(obj.rotation, 'x').min(-Math.PI).max(Math.PI).step(0.01).name('rotX');\n      objGUI.add(obj.rotation, 'y').min(-Math.PI).max(Math.PI).step(0.01).name('rotY');\n      objGUI.add(obj.rotation, 'z').min(-Math.PI).max(Math.PI).step(0.01).name('rotZ');\n      objGUI.addColor(this.params, 'color').onChange(() => {\n        obj.material.color.set(this.params.color);\n      });\n      objGUI.close();\n    };\n\n    //the main function\n    this.params = {\n      color: 0xff0000,\n      backgroundColor: 0xe2f0f9\n    };\n    const aspect = window.innerWidth / window.innerHeight; // const clock = new Clock()\n    //set up scene\n\n    this.scene = new Scene();\n    this.scene.background = new Color(this.params.backgroundColor);\n    this.camera = new PerspectiveCamera(75, aspect, 0.1, 1000);\n    this.renderer = new WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.type = PCFSoftShadowMap;\n    this.scene.add(this.camera);\n    this.camera.position.z = -300; // controls\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement); // this.resize(window.innerWidth, window.innerHeight)\n\n    this.cursor = {\n      x: 0,\n      y: 0\n    };\n    parent.appendChild(this.renderer.domElement);\n    this.makeScene();\n    this.animate();\n  }\n\n}\n\nexport default WebGLApp;","map":{"version":3,"sources":["/Users/amnaazhar/Desktop/threejs-journey/chapters/chapter2-flowfields/src/webglapp.js"],"names":["Scene","PerspectiveCamera","DirectionalLight","Mesh","MeshBasicMaterial","Vector3","PCFSoftShadowMap","Color","Group","BoxGeometry","CapsuleGeometry","SphereGeometry","CircleGeometry","ConeGeometry","Clock","WebGLRenderer","TextureLoader","BufferGeometry","BufferAttribute","CylinderGeometry","MeshPhongMaterial","DoubleSide","AmbientLight","PointLight","PlaneGeometry","OrbitControls","GUI","WebGLApp","constructor","parent","resize","width","height","camera","aspect","updateProjectionMatrix","renderer","setSize","addLights","createAmbientLight","createPointLight","ambientLight","scene","add","light","castShadow","shadow","mapSize","position","set","animate","sphere","x","Math","ceil","window","innerWidth","resolution","y","innerHeight","temp","array_of_boxes","material","color","needsUpdate","render","requestAnimationFrame","controls","update","makeScene","res","value","Array","boundaryBox","wireframe","PI","cube","console","log","length","makeGUI","gui","folderName","obj","objGUI","addFolder","min","max","step","rotation","name","addColor","params","onChange","close","backgroundColor","background","antialias","shadowMap","enabled","type","z","domElement","cursor","appendChild"],"mappings":"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","sourcesContent":["import{\n    Scene,\n    PerspectiveCamera,\n    DirectionalLight,\n    Mesh,\n    MeshBasicMaterial,\n    Vector3,\n    PCFSoftShadowMap,\n    Color,\n    Group,\n    BoxGeometry,\n    CapsuleGeometry,\n    SphereGeometry,\n    CircleGeometry,\n    ConeGeometry,\n    Clock,\n    WebGLRenderer,\n    TextureLoader,\n    BufferGeometry,\n    BufferAttribute,\n    CylinderGeometry,\n    MeshPhongMaterial,\n    DoubleSide,\n    AmbientLight,\n    PointLight,\n    PlaneGeometry\n} from 'three'\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport GUI from 'lil-gui'; \n\nclass WebGLApp {\n\n    constructor(parent){\n        \n        //the main function\n        this.params = {\n            color: 0xff0000,\n            backgroundColor: 0xe2f0f9\n        }\n        const aspect = window.innerWidth / window.innerHeight\n       // const clock = new Clock()\n        //set up scene\n        this.scene = new Scene()\n        this.scene.background = new Color(this.params.backgroundColor);\n        this.camera = new PerspectiveCamera(75, aspect, 0.1, 1000)\n\n        this.renderer = new WebGLRenderer({antialias:true})\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.shadowMap.type = PCFSoftShadowMap;\n\n        this.scene.add( this.camera )\n        this.camera.position.z = -300\n\n        // controls\n        this.controls = new OrbitControls( this.camera, this.renderer.domElement );\n       // this.resize(window.innerWidth, window.innerHeight)\n       this.cursor = {\n            x: 0,\n            y: 0\n        }\n\n        parent.appendChild(this.renderer.domElement)\n        this.makeScene()\n        this.animate()\n\n    }\n\n    resize = (width, height) => {\n        this.camera.aspect = width / height\n        this.camera.updateProjectionMatrix()\n        this.renderer.setSize(width, height)\n        \n    }\n\n    addLights= () =>{\n        this.createAmbientLight();\n        this.createPointLight();\n    }\n\n    createAmbientLight = () => {\n        this.ambientLight = new AmbientLight(0x999999, 1);\n        this.scene.add(this.ambientLight);\n    };\n    \n    createPointLight = () => {\n        this.light = new PointLight(0xffffff, 0.3, 0);\n        this.light.castShadow = true;\n        this.light.shadow.mapSize.width = 5000;\n        this.light.shadow.mapSize.height = 5000;\n        this.light.position.set(0,20,-5);\n        this.scene.add(this.light);\n\n        const light = new PointLight(0xffffff, 0.2, 0);\n        light.castShadow = false;\n        light.position.set(0,30,50);\n        this.scene.add(light);\n    };\n\n\n    animate = () => {\n        \n        if (this.sphere != null){\n\n            var x = Math.ceil((this.sphere.position.x + window.innerWidth/4)/this.resolution) - 1\n            var y = Math.ceil((this.sphere.position.y + window.innerHeight/4)/this.resolution) - 1\n            \n            var temp = this.array_of_boxes[x][y]\n            //console.log(this.array_of_boxes)\n            temp.material.color = new Color(0xff0000);\n            temp.material.needsUpdate = true;\n        }\n\n        this.renderer.render( this.scene, this.camera )\n        requestAnimationFrame( this.animate )\n        this.controls.update();\n    }\n\n    makeScene = () => {\n\n        this.addLights()\n        // const gui = new GUI;\n\n        /*\n        In pseudocode, that's something like:\n\n        // starting point x = 500 y = 100\n        begin_curve()\n        for (n in [0..num_steps]) {\n            draw_vertex(x, y)\n            x_offset = x - left_x     y_offset = y - top_y\n            column_index = int(x_offset / resolution)     row_index = int(y_offset / resolution)\n            // NOTE: normally you want to check the bounds here     grid_angle = grid[column_index][row_index]\n            x_step = step_length * cos(grid_angle)     y_step = step_length * sin(grid_angle)\n            x = x + x_step     y = y + y_step }\n        end_curve()\n        */\n            var res = 50\n            this.resolution = res\n            const width = window.innerWidth/2\n            const height = window.innerHeight/2\n            var value;\n            this.array_of_boxes = new Array();\n\n            this.sphere  = new Mesh(new SphereGeometry(10, 10, 32), new MeshBasicMaterial( {color: 0x0000ff} ))            \n            this.sphere.position.set(100, 200, 0)\n            this.scene.add(this.sphere);\n            \n            var boundaryBox = new Mesh(new BoxGeometry(width, height, 1), new MeshBasicMaterial( {color: 0x000000, wireframe:true} ))\n            boundaryBox.position.set(0,0,10)\n            this.scene.add (boundaryBox)   \n\n            for(var x = 0; x < width; x+=res ){\n                //console.log(x/res)\n                this.array_of_boxes[x/res] = new Array();\n                for(var y = 0; y < height; y+=res){\n                    \n                    value = (x + y) * 0.01 * Math.PI * 2;\n                    \n                    var cube = new Mesh(new BoxGeometry(res, res, 1), new MeshBasicMaterial( {color: 0x00ff00, wireframe:true} ))\n                    cube.position.set(x - width/2, y -height/2 , 10);\n                    this.scene.add( cube );\n\n                    this.array_of_boxes[x/res][y/res] = cube\n\n                }\n\n            }\n\n            console.log(this.array_of_boxes.length)\n\n        // //scene\n        // gui\n        // .addColor(this.params, 'backgroundColor')\n        // .onChange(()=>{\n        //     this.scene.background.set(this.params.backgroundColor)\n        // })\n\n        // gui.close()\n        // this.scene.add(gui)\n\n    }\n\n    makeGUI = (gui, folderName, obj) => {\n        //gui face\n        const objGUI = gui.addFolder(folderName);\n        objGUI\n            .add(obj.position,'x')\n            .min(-10)\n            .max(10)\n            .step(0.01)\n        objGUI\n            .add(obj.position,'y')\n            .min(-10)\n            .max(10)\n            .step(0.01)\n        objGUI\n            .add(obj.position,'z')\n            .min(-Math.PI)\n            .max(Math.PI)\n            .step(0.01)\n        objGUI\n            .add(obj.rotation,'x')\n            .min(-Math.PI)\n            .max(Math.PI)\n            .step(0.01)\n            .name('rotX')\n        objGUI\n            .add(obj.rotation,'y')\n            .min(-Math.PI)\n            .max(Math.PI)\n            .step(0.01)\n            .name('rotY')\n        objGUI\n            .add(obj.rotation,'z')\n            .min(-Math.PI)\n            .max(Math.PI)\n            .step(0.01)\n            .name('rotZ')\n        objGUI\n            .addColor(this.params, 'color')\n            .onChange(()=>{\n                obj.material.color.set(this.params.color)\n            })\n        objGUI.close()\n    }\n\n  \n\n}\n\nexport default WebGLApp;"]},"metadata":{},"sourceType":"module"}