{"ast":null,"code":"/* eslint-disable no-array-constructor */\nimport { Scene, PerspectiveCamera, Mesh, MeshBasicMaterial, PCFSoftShadowMap, Color, SphereGeometry, ConeGeometry, WebGLRenderer, AmbientLight, PointLight, Fog, Group, TextureLoader, PlaneGeometry } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport GUI from 'lil-gui';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { AfterimagePass } from 'three/examples/jsm/postprocessing/AfterimagePass.js';\nimport { ImprovedNoise } from 'three/examples/jsm/math/ImprovedNoise.js';\nimport colors from './colors.js';\n\nclass WebGLApp {\n  constructor(parent) {\n    this.resize = (width, height) => {\n      this.camera.aspect = width / height;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(width, height);\n      this.composer.setSize(width, height);\n    };\n\n    this.addLights = () => {\n      this.createAmbientLight();\n      this.createPointLight();\n    };\n\n    this.createAmbientLight = () => {\n      this.ambientLight = new AmbientLight(0x999999, 1);\n      this.scene.add(this.ambientLight);\n    };\n\n    this.createPointLight = () => {\n      this.light = new PointLight(0xffffff, 0.3, 0);\n      this.light.castShadow = true;\n      this.light.shadow.mapSize.width = 5000;\n      this.light.shadow.mapSize.height = 5000;\n      this.light.position.set(0, 20, -5);\n      this.scene.add(this.light);\n      const light = new PointLight(0xffffff, 0.2, 0);\n      light.castShadow = false;\n      light.position.set(0, 30, 50);\n      this.scene.add(light);\n    };\n\n    this.animate = () => {\n      if (this.particleArr != null) {\n        for (var i = 0; i < this.particleArr.length; i++) {\n          this.moveParticle(i);\n        }\n      }\n\n      this.composer.render();\n      requestAnimationFrame(this.animate);\n      this.controls.update();\n    };\n\n    this.moveParticle = i => {\n      var x = Math.ceil(this.particleArr[i].p.x / this.res) - 1;\n      var y = Math.ceil(this.particleArr[i].p.y / this.res) - 1;\n      var value = this.array_of_dir[x][y];\n      this.particleArr[i].p.vx += Math.cos(value) * -0.01;\n      this.particleArr[i].p.vy += Math.sin(value) * 0.01;\n      this.particleArr[i].p.x += this.particleArr[i].p.vx;\n      this.particleArr[i].p.y += this.particleArr[i].p.vy; // apply some friction so point doesn't speed up too much\n\n      this.particleArr[i].p.vx *= 0.99;\n      this.particleArr[i].p.vy *= 0.99; // wrap around edges of screen - boundaries\n\n      if (this.particleArr[i].p.x > this.width) this.particleArr[i].p.x = 1;\n      if (this.particleArr[i].p.y > this.height) this.particleArr[i].p.y = 1;\n      if (this.particleArr[i].p.x < 0) this.particleArr[i].p.x = this.width;\n      if (this.particleArr[i].p.y < 0) this.particleArr[i].p.y = this.height;\n      this.particleArr[i].sphere.position.set(this.particleArr[i].p.x - this.width / 2, this.particleArr[i].p.y - this.height / 2);\n    };\n\n    this.makeScene = () => {\n      this.fieldSetup();\n      this.makeField();\n    };\n\n    this.fieldSetup = () => {\n      //field setup\n      this.res = 25; // resolution\n\n      this.width = 450; // flowfield width and height\n\n      this.height = 450;\n      this.num_p = 25; // number of particles\n      //make an array of particles with position and velocity\n\n      this.particleArr = new Array();\n\n      for (var i = 0; i < this.num_p; i++) {\n        var p = {\n          x: Math.random() * this.width,\n          y: Math.random() * this.height,\n          vx: 0,\n          vy: 0\n        };\n        var color = this.getRandomColor();\n        var sphere = new Mesh(new SphereGeometry(5, 5, 32), new MeshBasicMaterial({\n          color: color\n        }));\n        sphere.position.set(p.x, p.y);\n        this.scene.add(sphere);\n        var particle = {\n          p: p,\n          sphere: sphere\n        };\n        this.particleArr[i] = particle;\n      } //making array to store field values\n\n\n      this.array_of_boxes = new Array(); // helper code to visualize field\n\n      this.array_of_dir = new Array(); // array with all the vectors of the field\n      //TO DO: data from perlin\n      // understanding the data\n      // get the debug working\n      // to the image\n\n      this.drawImage(\"heart.jpeg\");\n      var value; // for field\n\n      for (var x = 0; x < this.width; x += this.res) {\n        //console.log(x/res)\n        this.array_of_dir[x / this.res] = new Array();\n        this.array_of_boxes[x / this.res] = new Array();\n\n        for (var y = 0; y < this.height; y += this.res) {\n          value = this.perlin.noise(x * 0.65, y * 65, 0.65); // console.log(\"field\" + this.context)\n          // if(this.context2D.getImageData(x,y, this.width, this.height).data[0] > 0){\n          //     value = 0\n          // }else{\n          //     value = 1\n          // }\n\n          this.array_of_dir[x / this.res][y / this.res] = value * this.params.noise_value;\n        }\n      }\n    };\n\n    this.drawImage = filename => {\n      const loader = new TextureLoader();\n      loader.load(\"/assets/textures/\" + filename, texture => {\n        // read texture data\n        // const canvas = document.createElement( 'canvas' );\n        // canvas.width = this.width;\n        // canvas.height = this.height;\n        // this.context = canvas.getContext( '2d' );\n        // console.log(texture.image)\n        // this.context.drawImage( texture.image, 0, 0 );\n        // const data = this.context.getImageData(368, 368, canvas.width, canvas.height);\n        // console.log( data.data[0] );\n        // visualize the texture\n        const geometry = new PlaneGeometry(this.width, this.width);\n        const material = new MeshBasicMaterial({\n          map: texture\n        });\n        const mesh = new Mesh(geometry, material);\n        mesh.position.set(0, 0, 10);\n        mesh.rotation.set(Math.PI, 0, Math.PI);\n        this.scene.add(mesh);\n      }, // onProgress callback currently not supported\n      undefined, // onError callback\n      function (err) {\n        console.error('An error happened.');\n      }); // read texture data\n\n      const myImg = new Image();\n      myImg.crossOrigin = \"Anonymous\";\n      const canvas = document.createElement('canvas');\n      canvas.width = this.width;\n      canvas.height = this.height;\n      this.context = canvas.getContext('2d');\n\n      myImg.onload = () => {\n        this.context.drawImage(myImg, 0, 0);\n        const data = this.context.getImageData(368, 368, this.width, this.height);\n        console.log(data.data[0]);\n        this.printData();\n      };\n\n      myImg.src = \"assets/textures/\" + filename;\n    };\n\n    this.printData = () => {\n      const data = this.context.getImageData(368, 368, this.width, this.height);\n      console.log(data.data[0]);\n    };\n\n    this.makeField = () => {\n      let angle = 0;\n      this.field_lines = new Group();\n\n      for (var x = 0; x < this.width; x += this.res) {\n        for (var y = 0; y < this.height; y += this.res) {\n          angle = this.array_of_dir[x / this.res][y / this.res]; //console.log(\"show field \", angle)\n\n          const geometry = new ConeGeometry(1, 25, 1);\n          const cone = new Mesh(geometry, new MeshBasicMaterial({\n            color: 0xffffff,\n            wireframe: true\n          })); //white color\n\n          cone.position.set(x - this.width / 2 + this.res / 2, y - this.height / 2 + this.res / 2, -5);\n          cone.rotateZ(angle);\n          this.field_lines.add(cone);\n        }\n      } //field lines needs to be rotated horizontally to go from ' | ' to ' __ '\n\n\n      this.field_lines.rotateZ(Math.PI / 2);\n      this.showField();\n    };\n\n    this.showField = () => {\n      if (this.params.field) this.scene.add(this.field_lines);else this.scene.remove(this.field_lines);\n    };\n\n    this.createGUI = () => {\n      const gui = new GUI();\n      gui.add(this.afterimagePass.uniforms['damp'], 'value', 0, 1).step(0.001).name('PostProcessing Damp');\n      gui.add(this.params, \"field\").onChange(this.showField).name('Show field'); // gui\n      //     .add(this.params, \"noise_value\" , 'value', 0, 5)\n      //     .step( 0.1 )\n      //     .name('Noise value')\n    };\n\n    //the main function\n    // --- V A R S ----\n    this.params = {\n      color: 0xff0000,\n      backgroundColor: 0xe2f0f9,\n      field: true,\n      noise_value: 2\n    };\n    this.colorsArray = colors();\n    this.switch_field = false;\n    this.perlin = new ImprovedNoise(); // ---- BASIC SCENE SETUP----\n\n    const aspect = window.innerWidth / window.innerHeight; // const clock = new Clock()\n    //scene\n\n    this.scene = new Scene(); //this.scene.background = new Color(this.params.backgroundColor);\n    //add fog for trail fade\n\n    this.scene.fog = new Fog(0x000000, 1, 1000); // fog end\n    //camera setup\n\n    this.camera = new PerspectiveCamera(75, aspect, 0.1, 1000);\n    this.camera.position.z = -300;\n    this.scene.add(this.camera); //renderer set up\n\n    this.renderer = new WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.type = PCFSoftShadowMap;\n    parent.appendChild(this.renderer.domElement); // postprocessing\n\n    this.composer = new EffectComposer(this.renderer);\n    this.composer.addPass(new RenderPass(this.scene, this.camera));\n    this.afterimagePass = new AfterimagePass();\n    this.composer.addPass(this.afterimagePass); // controls set up\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement); //for cursor interaction\n    // this.cursor = {\n    //         x: 0,\n    //         y: 0\n    // }\n    //call init function here\n\n    this.addLights();\n    this.makeScene();\n    this.animate();\n    this.createGUI();\n  }\n\n  getRandomColor() {\n    //random color\n    var color = new Color();\n    color.setHex(`0x${this.colorsArray[Math.floor(Math.random() * this.colorsArray.length)]}`);\n\n    if (color < 500) {\n      color.setHex(500);\n    }\n\n    return color;\n  }\n\n}\n\nexport default WebGLApp;","map":{"version":3,"sources":["/Users/amnaazhar/Desktop/threejs-journey/chapters/chapter2-flowfields/src/webglapp.js"],"names":["Scene","PerspectiveCamera","Mesh","MeshBasicMaterial","PCFSoftShadowMap","Color","SphereGeometry","ConeGeometry","WebGLRenderer","AmbientLight","PointLight","Fog","Group","TextureLoader","PlaneGeometry","OrbitControls","GUI","EffectComposer","RenderPass","AfterimagePass","ImprovedNoise","colors","WebGLApp","constructor","parent","resize","width","height","camera","aspect","updateProjectionMatrix","renderer","setSize","composer","addLights","createAmbientLight","createPointLight","ambientLight","scene","add","light","castShadow","shadow","mapSize","position","set","animate","particleArr","i","length","moveParticle","render","requestAnimationFrame","controls","update","x","Math","ceil","p","res","y","value","array_of_dir","vx","cos","vy","sin","sphere","makeScene","fieldSetup","makeField","num_p","Array","random","color","getRandomColor","particle","array_of_boxes","drawImage","perlin","noise","params","noise_value","filename","loader","load","texture","geometry","material","map","mesh","rotation","PI","undefined","err","console","error","myImg","Image","crossOrigin","canvas","document","createElement","context","getContext","onload","data","getImageData","log","printData","src","angle","field_lines","cone","wireframe","rotateZ","showField","field","remove","createGUI","gui","afterimagePass","uniforms","step","name","onChange","backgroundColor","colorsArray","switch_field","window","innerWidth","innerHeight","fog","z","antialias","shadowMap","enabled","type","appendChild","domElement","addPass","setHex","floor"],"mappings":"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","sourcesContent":["/* eslint-disable no-array-constructor */\nimport{\n    Scene,\n    PerspectiveCamera,\n    Mesh,\n    MeshBasicMaterial,\n    PCFSoftShadowMap,\n    Color,\n    SphereGeometry,\n    ConeGeometry,\n    WebGLRenderer,\n    AmbientLight,\n    PointLight,\n    Fog,\n    Group,\n    TextureLoader,\n    PlaneGeometry\n} from 'three'\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport GUI from 'lil-gui'; \nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { AfterimagePass } from 'three/examples/jsm/postprocessing/AfterimagePass.js';\nimport { ImprovedNoise } from 'three/examples/jsm/math/ImprovedNoise.js';\nimport colors from './colors.js'\n\nclass WebGLApp {\n\n    constructor(parent){\n        \n        //the main function\n\n        // --- V A R S ----\n        this.params = {\n            color: 0xff0000,\n            backgroundColor: 0xe2f0f9,\n            field: true,\n            noise_value: 2\n        }\n        this.colorsArray = colors()\n        this.switch_field = false\n        this.perlin = new ImprovedNoise()\n    \n        // ---- BASIC SCENE SETUP----\n        const aspect = window.innerWidth / window.innerHeight\n        // const clock = new Clock()\n       \n        //scene\n        this.scene = new Scene()\n        //this.scene.background = new Color(this.params.backgroundColor);\n        \n        //add fog for trail fade\n        this.scene.fog = new Fog( 0x000000, 1, 1000 );\n        // fog end\n        \n        //camera setup\n        this.camera = new PerspectiveCamera(75, aspect, 0.1, 1000)\n        this.camera.position.z = -300\n        this.scene.add( this.camera )\n\n        //renderer set up\n        this.renderer = new WebGLRenderer({antialias:true})\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.shadowMap.type = PCFSoftShadowMap;\n        parent.appendChild(this.renderer.domElement)\n\n        // postprocessing\n        this.composer = new EffectComposer( this.renderer );\n        this.composer.addPass( new RenderPass( this.scene, this.camera));\n        this.afterimagePass = new AfterimagePass();\n        this.composer.addPass( this.afterimagePass );\n\n        // controls set up\n        this.controls = new OrbitControls( this.camera, this.renderer.domElement );\n       \n        //for cursor interaction\n        // this.cursor = {\n        //         x: 0,\n        //         y: 0\n        // }\n\n        //call init function here\n        this.addLights()\n        this.makeScene()\n        this.animate()\n        this.createGUI()\n\n    }\n\n    getRandomColor(){\n\n        //random color\n        var color = new Color();\n        color.setHex(`0x${this.colorsArray[Math.floor(Math.random() * this.colorsArray.length)]}`);\n        if (color < 500) {\n            color.setHex(500);\n        }\n        return color\n\n    }\n\n    resize = (width, height) => {\n        this.camera.aspect = width / height\n        this.camera.updateProjectionMatrix()\n        this.renderer.setSize(width, height)\n        this.composer.setSize(width, height);\n        \n    }\n\n    addLights= () =>{\n        this.createAmbientLight();\n        this.createPointLight();\n    }\n\n    createAmbientLight = () => {\n        this.ambientLight = new AmbientLight(0x999999, 1);\n        this.scene.add(this.ambientLight);\n    };\n    \n    createPointLight = () => {\n        this.light = new PointLight(0xffffff, 0.3, 0);\n        this.light.castShadow = true;\n        this.light.shadow.mapSize.width = 5000;\n        this.light.shadow.mapSize.height = 5000;\n        this.light.position.set(0,20,-5);\n        this.scene.add(this.light);\n\n        const light = new PointLight(0xffffff, 0.2, 0);\n        light.castShadow = false;\n        light.position.set(0,30,50);\n        this.scene.add(light);\n    };\n\n\n    animate = () => {\n        \n        if (this.particleArr != null){\n            for(var i = 0; i < this.particleArr.length ; i++){\n                this.moveParticle(i)\n            }\n        }\n\n        this.composer.render();\n        requestAnimationFrame( this.animate )\n        this.controls.update();\n    }\n\n    moveParticle = (i) => {\n\n        var x = Math.ceil((this.particleArr[i].p.x)/this.res)-1\n        var y = Math.ceil((this.particleArr[i].p.y)/this.res)-1\n        var value = this.array_of_dir[x][y]\n\n        this.particleArr[i].p.vx += Math.cos(value) * -0.01\n        this.particleArr[i].p.vy += Math.sin(value) * 0.01\n\n        this.particleArr[i].p.x +=  this.particleArr[i].p.vx;\n        this.particleArr[i].p.y +=  this.particleArr[i].p.vy;\n\n        // apply some friction so point doesn't speed up too much\n        this.particleArr[i].p.vx *= 0.99;\n        this.particleArr[i].p.vy *= 0.99;\n\n        // wrap around edges of screen - boundaries\n        if(this.particleArr[i].p.x > this.width) this.particleArr[i].p.x = 1;\n        if(this.particleArr[i].p.y > this.height) this.particleArr[i].p.y = 1;\n        if(this.particleArr[i].p.x < 0) this.particleArr[i].p.x = this.width;\n        if(this.particleArr[i].p.y < 0) this.particleArr[i].p.y = this.height;\n\n        this.particleArr[i].sphere.position.set(this.particleArr[i].p.x - this.width/2, this.particleArr[i].p.y - this.height/2)\n\n    }\n    \n\n    makeScene = () => {\n\n        this.fieldSetup();\n        this.makeField();\n    }\n\n    fieldSetup = () => {\n\n        //field setup\n        this.res = 25 // resolution\n        this.width = 450 // flowfield width and height\n        this.height = 450\n        this.num_p = 25 // number of particles\n        \n        //make an array of particles with position and velocity\n        this.particleArr = new Array()\n\n        for (var i = 0; i < this.num_p; i++){\n\n            var p = {\n                x: Math.random() * this.width,\n                y: Math.random() * this.height,\n                vx: 0,\n                vy: 0\n            }\n\n            var color = this.getRandomColor()\n            var sphere  = new Mesh(new SphereGeometry(5, 5, 32), new MeshBasicMaterial( {color: color} ))\n            sphere.position.set(p.x, p.y)\n            this.scene.add(sphere);\n\n            var particle = {\n                p:p, sphere:sphere\n            }\n\n            this.particleArr[i] = particle\n            \n        }\n\n        //making array to store field values\n        this.array_of_boxes = new Array() // helper code to visualize field\n        this.array_of_dir = new Array() // array with all the vectors of the field\n\n        //TO DO: data from perlin\n        // understanding the data\n        // get the debug working\n        // to the image\n\n        this.drawImage(\"heart.jpeg\");\n        var value; // for field\n        for(var x = 0; x < this.width; x+=this.res ){\n            //console.log(x/res)\n            this.array_of_dir[x/this.res] = new Array();\n            this.array_of_boxes[x/this.res] = new Array();\n\n            for(var y = 0; y < this.height; y+=this.res){\n\n                value = this.perlin.noise( x * 0.65, y * 65, 0.65);\n\n                // console.log(\"field\" + this.context)\n                // if(this.context2D.getImageData(x,y, this.width, this.height).data[0] > 0){\n                //     value = 0\n                // }else{\n                //     value = 1\n                // }\n                this.array_of_dir[x/this.res][y/this.res] = value * this.params.noise_value\n\n            }\n        }\n    }\n\n    drawImage = (filename) => {\n\n\t\tconst loader = new TextureLoader();\n        \n\t\tloader.load(\"/assets/textures/\"+filename, ( texture ) => {\n\t\t\t// read texture data\n\t\t\n\t\t\t// const canvas = document.createElement( 'canvas' );\n\t\t\t// canvas.width = this.width;\n\t\t\t// canvas.height = this.height;\n\t\t\t\n\t\t\t// this.context = canvas.getContext( '2d' );\n            // console.log(texture.image)\n\t\t\t// this.context.drawImage( texture.image, 0, 0 );\n\t\t\t\n\t\t\t// const data = this.context.getImageData(368, 368, canvas.width, canvas.height);\n\t\t\t// console.log( data.data[0] );\n\t\t\t\n\t\t\t// visualize the texture\n\t\t\t\n\t\t\tconst geometry = new PlaneGeometry(this.width,this.width);\n\t\t\tconst material = new MeshBasicMaterial( { map: texture } );\n\n\t\t\tconst mesh = new Mesh( geometry, material );\n            mesh.position.set(0,0,10)\n            mesh.rotation.set(Math.PI,0, Math.PI)\n\t\t\tthis.scene.add( mesh );\n\n        }, \n        // onProgress callback currently not supported\n        undefined,\n    \n        // onError callback\n        function ( err ) {\n            console.error( 'An error happened.' );\n        } );\n\n        // read texture data\n        const myImg = new Image();\n        myImg.crossOrigin = \"Anonymous\";\n\n        const canvas = document.createElement( 'canvas' );\n        canvas.width = this.width;\n        canvas.height = this.height;\n        this.context = canvas.getContext('2d');\n        \n        myImg.onload = () => {\n\n            this.context.drawImage(myImg, 0, 0);\n            const data = this.context.getImageData(368, 368, this.width, this.height);\n            console.log(data.data[0])\n            this.printData();\n\n        }\n\n        myImg.src = \"assets/textures/\"+filename;\n    }\n\n    printData = () => {\n        const data = this.context.getImageData(368, 368, this.width, this.height);\n        console.log(data.data[0])\n    }\n\n    makeField = () => {\n\n        let angle = 0;\n        this.field_lines = new Group();\n       \n        for(var x = 0; x < this.width; x+=this.res ){\n\n            for(var y = 0; y < this.height; y+=this.res){\n                \n                angle = this.array_of_dir[x/this.res][y/this.res]\n                //console.log(\"show field \", angle)\n\n                const geometry = new ConeGeometry( 1, 25, 1 )\n                const cone = new Mesh( geometry, new MeshBasicMaterial( {color: 0xffffff, wireframe:true} )) //white color\n                cone.position.set(x-this.width/2+this.res/2, y-this.height/2+this.res/2, -5)\n                cone.rotateZ(angle)\n                this.field_lines.add(cone)\n\n            }\n        }\n        //field lines needs to be rotated horizontally to go from ' | ' to ' __ '\n        this.field_lines.rotateZ (Math.PI/2)\n\n        this.showField();\n\n    }\n\n    showField = () => {\n\n        if(this.params.field) this.scene.add(this.field_lines)\n        else this.scene.remove(this.field_lines)\n\n    }\n    \n\n    createGUI = () => {\n\n        const gui = new GUI();\n        gui\n            .add( this.afterimagePass.uniforms[ 'damp' ], 'value', 0, 1 )\n            .step( 0.001 )\n            .name('PostProcessing Damp')\n        gui\n            .add(this.params, \"field\")\n            .onChange(this.showField)\n            .name('Show field')\n        // gui\n        //     .add(this.params, \"noise_value\" , 'value', 0, 5)\n        //     .step( 0.1 )\n        //     .name('Noise value')\n    }\n}\n\nexport default WebGLApp;\n"]},"metadata":{},"sourceType":"module"}