{"ast":null,"code":"import { Scene, PerspectiveCamera, DirectionalLight, Mesh, MeshBasicMaterial, Vector3, PCFSoftShadowMap, Color, SphereGeometry, ConeGeometry, WebGLRenderer, AmbientLight, PointLight, Fog } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport GUI from 'lil-gui';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { AfterimagePass } from 'three/examples/jsm/postprocessing/AfterimagePass.js';\nimport { ImprovedNoise } from 'three/examples/jsm/math/ImprovedNoise.js';\n\nclass WebGLApp {\n  constructor(parent) {\n    this.resize = (width, height) => {\n      this.camera.aspect = width / height;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(width, height);\n      this.composer.setSize(width, height);\n    };\n\n    this.addLights = () => {\n      this.createAmbientLight();\n      this.createPointLight();\n    };\n\n    this.createAmbientLight = () => {\n      this.ambientLight = new AmbientLight(0x999999, 1);\n      this.scene.add(this.ambientLight);\n    };\n\n    this.createPointLight = () => {\n      this.light = new PointLight(0xffffff, 0.3, 0);\n      this.light.castShadow = true;\n      this.light.shadow.mapSize.width = 5000;\n      this.light.shadow.mapSize.height = 5000;\n      this.light.position.set(0, 20, -5);\n      this.scene.add(this.light);\n      const light = new PointLight(0xffffff, 0.2, 0);\n      light.castShadow = false;\n      light.position.set(0, 30, 50);\n      this.scene.add(light);\n    };\n\n    this.animate = () => {\n      if (this.particleArr != null) {\n        for (var i = 0; i < this.particleArr.length; i++) {\n          this.moveParticle(i);\n        }\n      }\n\n      this.composer.render(); //this.renderer.render( this.scene, this.camera )\n\n      requestAnimationFrame(this.animate);\n      this.controls.update();\n    };\n\n    this.moveParticle = i => {\n      var x = Math.ceil(this.particleArr[i].p.x / this.res) - 1;\n      var y = Math.ceil(this.particleArr[i].p.y / this.res) - 1; // console.log(\"Value of boxes is:\", x, y)\n      // console.log(\"P.x: \", this.p.x,\"P.y: \", this.p.y)\n\n      var value = this.array_of_dir[x][y];\n      this.particleArr[i].p.vx += Math.cos(value) * -0.01;\n      this.particleArr[i].p.vy += Math.sin(value) * 0.01; //this.p.x = x\n      //this.p.y = y\n\n      this.particleArr[i].p.x += this.particleArr[i].p.vx;\n      this.particleArr[i].p.y += this.particleArr[i].p.vy; // apply some friction so point doesn't speed up too much\n\n      this.particleArr[i].p.vx *= 0.99;\n      this.particleArr[i].p.vy *= 0.99; // wrap around edges of screen\n\n      if (this.particleArr[i].p.x > this.width) this.particleArr[i].p.x = 1;\n      if (this.particleArr[i].p.y > this.height) this.particleArr[i].p.y = 1;\n      if (this.particleArr[i].p.x < 0) this.particleArr[i].p.x = this.width;\n      if (this.particleArr[i].p.y < 0) this.particleArr[i].p.y = this.height;\n      this.particleArr[i].sphere.position.set(this.particleArr[i].p.x - this.width / 2, this.particleArr[i].p.y - this.height / 2);\n    };\n\n    this.makeScene = () => {\n      //field setup\n      this.res = 25; // resolution\n\n      this.width = 450; // flowfield width and height\n\n      this.height = 450;\n      this.num_p = 25; // number of particles\n      //make an array of particles with position and velocity\n\n      this.particleArr = new Array();\n\n      for (var i = 0; i < this.num_p; i++) {\n        var p = {\n          x: Math.random() * this.width,\n          y: Math.random() * this.height,\n          vx: 0,\n          vy: 0\n        };\n        var color = this.getRandomColor();\n        var sphere = new Mesh(new SphereGeometry(5, 5, 32), new MeshBasicMaterial({\n          color: color\n        }));\n        sphere.position.set(p.x, p.y);\n        this.scene.add(sphere);\n        var particle = {\n          p: p,\n          sphere: sphere\n        };\n        this.particleArr[i] = particle;\n      } //making array to store field values\n\n\n      this.array_of_boxes = new Array(); // helper code to visualize field\n\n      this.array_of_dir = new Array(); // array with all the vectors of the field\n      //with wireframed cones to visualize\n\n      var value; // for field\n\n      for (var x = 0; x < this.width; x += this.res) {\n        //console.log(x/res)\n        this.array_of_dir[x / this.res] = new Array();\n        this.array_of_boxes[x / this.res] = new Array();\n\n        for (var y = 0; y < this.height; y += this.res) {\n          //value = Math.PI/6\n          value = this.perlin.noise(x * 6.5, y * 6.5, 6.5); //console.log(\"perlin noise \", value)\n          // const geometry = new ConeGeometry( 5, 25, 3 )\n          // const cone = new Mesh( geometry, new MeshBasicMaterial( {color: 0xff0000, wireframe:true} ))\n          //var cube = new Mesh(new BoxGeometry(res, res, 1), new MeshBasicMaterial( {color: 0x00ff00, wireframe:true} ))\n          // cone.position.set(x-this.width/2+this.res/2, y-this,this.height/2+this.res/2, 10)\n          // cone.rotateZ(value)\n          //  this.scene.add( cone )\n\n          this.array_of_dir[x / this.res][y / this.res] = value; //  this.array_of_boxes[x/this.res][y/this.res] = cone\n        }\n      }\n    };\n\n    this.createGUI = () => {\n      const gui = new GUI();\n      gui.add(this.afterimagePass.uniforms['damp'], 'value', 0, 1).step(0.001).name('Afterimage Damp');\n    };\n\n    this.angle = -2; // clean up: whats this?\n    //the main function\n\n    this.params = {\n      color: 0xff0000,\n      backgroundColor: 0xe2f0f9\n    };\n    const aspect = window.innerWidth / window.innerHeight; // const clock = new Clock()\n    //set up scene\n\n    this.scene = new Scene(); //this.scene.background = new Color(this.params.backgroundColor);\n    //add fog for trail fade\n\n    this.scene.fog = new Fog(0x000000, 1, 1000); // fog end\n    //camera setup\n\n    this.camera = new PerspectiveCamera(75, aspect, 0.1, 1000);\n    this.camera.position.z = -300;\n    this.scene.add(this.camera); //renderer set up\n\n    this.renderer = new WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.type = PCFSoftShadowMap;\n    parent.appendChild(this.renderer.domElement); // postprocessing\n\n    this.composer = new EffectComposer(this.renderer);\n    this.composer.addPass(new RenderPass(this.scene, this.camera));\n    this.afterimagePass = new AfterimagePass();\n    this.composer.addPass(this.afterimagePass); // controls set up\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement); //for cursor interaction\n    // this.cursor = {\n    //         x: 0,\n    //         y: 0\n    // }\n\n    this.perlin = new ImprovedNoise(); // Random Array  ...... TAKE THIS OUT \n\n    this.colorsArray = [\"63b598\", \"ce7d78\", \"ea9e70\", \"a48a9e\", \"c6e1e8\", \"648177\", \"0d5ac1\", \"f205e6\", \"1c0365\", \"14a9ad\", \"4ca2f9\", \"a4e43f\", \"d298e2\", \"6119d0\", \"d2737d\", \"c0a43c\", \"f2510e\", \"651be6\", \"79806e\", \"61da5e\", \"cd2f00\", \"9348af\", \"01ac53\", \"c5a4fb\", \"996635\", \"b11573\", \"4bb473\", \"75d89e\", \"2f3f94\", \"2f7b99\", \"da967d\", \"34891f\", \"b0d87b\", \"ca4751\", \"7e50a8\", \"c4d647\", \"e0eeb8\", \"11dec1\", \"289812\", \"566ca0\", \"ffdbe1\", \"2f1179\", \"935b6d\", \"916988\", \"513d98\", \"aead3a\", \"9e6d71\", \"4b5bdc\", \"0cd36d\", \"250662\", \"cb5bea\", \"228916\", \"ac3e1b\", \"df514a\", \"539397\", \"880977\", \"f697c1\", \"ba96ce\", \"679c9d\", \"c6c42c\", \"5d2c52\", \"48b41b\", \"e1cf3b\", \"5be4f0\", \"57c4d8\", \"a4d17a\", \"225b8\", \"be608b\", \"96b00c\", \"088baf\", \"f158bf\", \"e145ba\", \"ee91e3\", \"05d371\", \"5426e0\", \"4834d0\", \"802234\", \"6749e8\", \"0971f0\", \"8fb413\", \"b2b4f0\", \"c3c89d\", \"c9a941\", \"41d158\", \"fb21a3\", \"51aed9\", \"5bb32d\", \"807fb\", \"21538e\", \"89d534\", \"d36647\", \"7fb411\", \"0023b8\", \"3b8c2a\", \"986b53\", \"f50422\", \"983f7a\", \"ea24a3\", \"79352c\", \"521250\", \"c79ed2\", \"d6dd92\", \"e33e52\", \"b2be57\", \"fa06ec\", \"1bb699\", \"6b2e5f\", \"64820f\", \"1c271\", \"21538e\", \"89d534\", \"d36647\", \"7fb411\", \"0023b8\", \"3b8c2a\", \"986b53\", \"f50422\", \"983f7a\", \"ea24a3\", \"79352c\", \"521250\", \"c79ed2\", \"d6dd92\", \"e33e52\", \"b2be57\", \"fa06ec\", \"1bb699\", \"6b2e5f\", \"64820f\", \"1c271\", \"9cb64a\", \"996c48\", \"9ab9b7\", \"06e052\", \"e3a481\", \"0eb621\", \"fc458e\", \"b2db15\", \"aa226d\", \"792ed8\", \"73872a\", \"520d3a\", \"cefcb8\", \"a5b3d9\", \"7d1d85\", \"c4fd57\", \"f1ae16\", \"8fe22a\", \"ef6e3c\", \"243eeb\", \"1dc18\", \"dd93fd\", \"3f8473\", \"e7dbce\", \"421f79\", \"7a3d93\", \"635f6d\", \"93f2d7\", \"9b5c2a\", \"15b9ee\", \"0f5997\", \"409188\", \"911e20\", \"1350ce\", \"10e5b1\", \"fff4d7\", \"cb2582\", \"ce00be\", \"32d5d6\", \"17232\", \"608572\", \"c79bc2\", \"00f87c\", \"77772a\", \"6995ba\", \"fc6b57\", \"f07815\", \"8fd883\", \"060e27\", \"96e591\", \"21d52e\", \"d00043\", \"b47162\", \"1ec227\", \"4f0f6f\", \"1d1d58\", \"947002\", \"bde052\", \"e08c56\", \"28fcfd\", \"bb09b\", \"36486a\", \"d02e29\", \"1ae6db\", \"3e464c\", \"a84a8f\", \"911e7e\", \"3f16d9\", \"0f525f\", \"ac7c0a\", \"b4c086\", \"c9d730\", \"30cc49\", \"3d6751\", \"fb4c03\", \"640fc1\", \"62c03e\", \"d3493a\", \"88aa0b\", \"406df9\", \"615af0\", \"4be47\", \"2a3434\", \"4a543f\", \"79bca0\", \"a8b8d4\", \"00efd4\", \"7ad236\", \"7260d8\", \"1deaa7\", \"06f43a\", \"823c59\", \"e3d94c\", \"dc1c06\", \"f53b2a\", \"b46238\", \"2dfff6\", \"a82b89\", \"1a8011\", \"436a9f\", \"1a806a\", \"4cf09d\", \"c188a2\", \"67eb4b\", \"b308d3\", \"fc7e41\", \"af3101\", \"ff065\", \"71b1f4\", \"a2f8a5\", \"e23dd0\", \"d3486d\", \"00f7f9\", \"474893\", \"3cec35\", \"1c65cb\", \"5d1d0c\", \"2d7d2a\", \"ff3420\", \"5cdd87\", \"a259a4\", \"e4ac44\", \"1bede6\", \"8798a4\", \"d7790f\", \"b2c24f\", \"de73c2\", \"d70a9c\", \"25b67\", \"88e9b8\", \"c2b0e2\", \"86e98f\", \"ae90e2\", \"1a806b\", \"436a9e\", \"0ec0ff\", \"f812b3\", \"b17fc9\", \"8d6c2f\", \"d3277a\", \"2ca1ae\", \"9685eb\", \"8a96c6\", \"dba2e6\", \"76fc1b\", \"608fa4\", \"20f6ba\", \"07d7f6\", \"dce77a\", \"77ecca\"]; //call init function here\n\n    this.addLights();\n    this.makeScene();\n    this.animate();\n    this.createGUI();\n  }\n\n  getRandomColor() {\n    //random color\n    var color = new Color();\n    color.setHex(`0x${this.colorsArray[Math.floor(Math.random() * this.colorsArray.length)]}`);\n\n    if (color < 500) {\n      color.setHex(500);\n    }\n\n    return color;\n  }\n\n}\n\nexport default WebGLApp; // makeGUI = (gui, folderName, obj) => {\n//     //gui face\n//     const objGUI = gui.addFolder(folderName);\n//     objGUI\n//         .add(obj.position,'x')\n//         .min(-10)\n//         .max(10)\n//         .step(0.01)\n//     objGUI\n//         .add(obj.position,'y')\n//         .min(-10)\n//         .max(10)\n//         .step(0.01)\n//     objGUI\n//         .add(obj.position,'z')\n//         .min(-Math.PI)\n//         .max(Math.PI)\n//         .step(0.01)\n//     objGUI\n//         .add(obj.rotation,'x')\n//         .min(-Math.PI)\n//         .max(Math.PI)\n//         .step(0.01)\n//         .name('rotX')\n//     objGUI\n//         .add(obj.rotation,'y')\n//         .min(-Math.PI)\n//         .max(Math.PI)\n//         .step(0.01)\n//         .name('rotY')\n//     objGUI\n//         .add(obj.rotation,'z')\n//         .min(-Math.PI)\n//         .max(Math.PI)\n//         .step(0.01)\n//         .name('rotZ')\n//     objGUI\n//         .addColor(this.params, 'color')\n//         .onChange(()=>{\n//             obj.material.color.set(this.params.color)\n//         })\n//     objGUI.close()\n// }\n// for (x=0; x < width ; x +-3){\n//     for (y = 0 y <height ; y +=3){\n//         cube (3,3)\n//         cube.position (x,y)\n//     }\n// }\n// COLORING BOXES CODE INSIDE ANIMATE FUNCTION\n//apply boundaries here\n// var x = Math.ceil((this.sphere.position.x + this.width/2)/this.resolution) - 1\n// var y = Math.ceil((this.sphere.position.y + this.height/2)/this.resolution) - 1\n// // helper code -- TODO: replace it with reading box values and applying it to particle\n// for (var m=0; m<this.array_of_boxes.length; m++){\n//     for (var n=0; n<this.array_of_boxes.length; n++){\n//         var temp = this.array_of_boxes[m][n]\n//         //console.log(this.array_of_boxes)\n//         temp.material.color = new Color(0x000000)\n//         temp.material.needsUpdate = true\n//        // this.sphere.\n//     }\n// }\n// var temp = this.array_of_boxes[x][y]\n// //console.log(this.array_of_boxes)\n// temp.material.color = new Color(0xff0000)\n// temp.material.needsUpdate = true\n// end of  helper code \n//MOVING: just animating the sphere\n// this.angle+=0.5;\n// if(this.angle> 360){\n//     this.angle=0;\n// }\n// this.sphere.position.x = Math.cos (this.angle * (Math.PI / 180)) * 120\n// this.sphere.position.y = Math.sin (this.angle * (Math.PI / 180)) * 120\n//get value\n// calculate new acceleration factor based on value direction\n// and add that to point's velocity\n\n/*\nIn pseudocode, that's something like:\n// starting point x = 500 y = 100\nbegin_curve()\nfor (n in [0..num_steps]) {\ndraw_vertex(x, y)\nx_offset = x - left_x     y_offset = y - top_y\ncolumn_index = int(x_offset / resolution)     row_index = int(y_offset / resolution)\n// NOTE: normally you want to check the bounds here     grid_angle = grid[column_index][row_index]\nx_step = step_length * cos(grid_angle)     y_step = step_length * sin(grid_angle)\nx = x + x_step     y = y + y_step }\nend_curve()\n*/","map":{"version":3,"sources":["/Users/amnaazhar/Desktop/threejs-journey/chapters/chapter2-flowfields/src/webglapp.js"],"names":["Scene","PerspectiveCamera","DirectionalLight","Mesh","MeshBasicMaterial","Vector3","PCFSoftShadowMap","Color","SphereGeometry","ConeGeometry","WebGLRenderer","AmbientLight","PointLight","Fog","OrbitControls","GUI","EffectComposer","RenderPass","AfterimagePass","ImprovedNoise","WebGLApp","constructor","parent","resize","width","height","camera","aspect","updateProjectionMatrix","renderer","setSize","composer","addLights","createAmbientLight","createPointLight","ambientLight","scene","add","light","castShadow","shadow","mapSize","position","set","animate","particleArr","i","length","moveParticle","render","requestAnimationFrame","controls","update","x","Math","ceil","p","res","y","value","array_of_dir","vx","cos","vy","sin","sphere","makeScene","num_p","Array","random","color","getRandomColor","particle","array_of_boxes","perlin","noise","createGUI","gui","afterimagePass","uniforms","step","name","angle","params","backgroundColor","window","innerWidth","innerHeight","fog","z","antialias","shadowMap","enabled","type","appendChild","domElement","addPass","colorsArray","setHex","floor"],"mappings":"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","sourcesContent":["import{\n    Scene,\n    PerspectiveCamera,\n    DirectionalLight,\n    Mesh,\n    MeshBasicMaterial,\n    Vector3,\n    PCFSoftShadowMap,\n    Color,\n    SphereGeometry,\n    ConeGeometry,\n    WebGLRenderer,\n    AmbientLight,\n    PointLight,\n    Fog\n} from 'three'\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport GUI from 'lil-gui'; \nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { AfterimagePass } from 'three/examples/jsm/postprocessing/AfterimagePass.js';\nimport { ImprovedNoise } from 'three/examples/jsm/math/ImprovedNoise.js';\n\nclass WebGLApp {\n\n    constructor(parent){\n        \n        this.angle = -2; // clean up: whats this?\n        //the main function\n        this.params = {\n            color: 0xff0000,\n            backgroundColor: 0xe2f0f9\n        }\n        const aspect = window.innerWidth / window.innerHeight\n       // const clock = new Clock()\n        \n       //set up scene\n        this.scene = new Scene()\n        //this.scene.background = new Color(this.params.backgroundColor);\n        \n        //add fog for trail fade\n        this.scene.fog = new Fog( 0x000000, 1, 1000 );\n        // fog end\n        \n        //camera setup\n        this.camera = new PerspectiveCamera(75, aspect, 0.1, 1000)\n        this.camera.position.z = -300\n        this.scene.add( this.camera )\n\n        //renderer set up\n        this.renderer = new WebGLRenderer({antialias:true})\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.shadowMap.type = PCFSoftShadowMap;\n        parent.appendChild(this.renderer.domElement)\n\n        // postprocessing\n        this.composer = new EffectComposer( this.renderer );\n        this.composer.addPass( new RenderPass( this.scene, this.camera));\n        this.afterimagePass = new AfterimagePass();\n        this.composer.addPass( this.afterimagePass );\n\n        // controls set up\n        this.controls = new OrbitControls( this.camera, this.renderer.domElement );\n       \n        //for cursor interaction\n        // this.cursor = {\n        //         x: 0,\n        //         y: 0\n        // }\n\n        this.perlin = new ImprovedNoise();\n\n        // Random Array  ...... TAKE THIS OUT \n        this.colorsArray = [\n            \"63b598\", \"ce7d78\", \"ea9e70\", \"a48a9e\", \"c6e1e8\", \"648177\", \"0d5ac1\",\n            \"f205e6\", \"1c0365\", \"14a9ad\", \"4ca2f9\", \"a4e43f\", \"d298e2\", \"6119d0\",\n            \"d2737d\", \"c0a43c\", \"f2510e\", \"651be6\", \"79806e\", \"61da5e\", \"cd2f00\",\n            \"9348af\", \"01ac53\", \"c5a4fb\", \"996635\", \"b11573\", \"4bb473\", \"75d89e\",\n            \"2f3f94\", \"2f7b99\", \"da967d\", \"34891f\", \"b0d87b\", \"ca4751\", \"7e50a8\",\n            \"c4d647\", \"e0eeb8\", \"11dec1\", \"289812\", \"566ca0\", \"ffdbe1\", \"2f1179\",\n            \"935b6d\", \"916988\", \"513d98\", \"aead3a\", \"9e6d71\", \"4b5bdc\", \"0cd36d\",\n            \"250662\", \"cb5bea\", \"228916\", \"ac3e1b\", \"df514a\", \"539397\", \"880977\",\n            \"f697c1\", \"ba96ce\", \"679c9d\", \"c6c42c\", \"5d2c52\", \"48b41b\", \"e1cf3b\",\n            \"5be4f0\", \"57c4d8\", \"a4d17a\", \"225b8\", \"be608b\", \"96b00c\", \"088baf\",\n            \"f158bf\", \"e145ba\", \"ee91e3\", \"05d371\", \"5426e0\", \"4834d0\", \"802234\",\n            \"6749e8\", \"0971f0\", \"8fb413\", \"b2b4f0\", \"c3c89d\", \"c9a941\", \"41d158\",\n            \"fb21a3\", \"51aed9\", \"5bb32d\", \"807fb\", \"21538e\", \"89d534\", \"d36647\",\n            \"7fb411\", \"0023b8\", \"3b8c2a\", \"986b53\", \"f50422\", \"983f7a\", \"ea24a3\",\n            \"79352c\", \"521250\", \"c79ed2\", \"d6dd92\", \"e33e52\", \"b2be57\", \"fa06ec\",\n            \"1bb699\", \"6b2e5f\", \"64820f\", \"1c271\", \"21538e\", \"89d534\", \"d36647\",\n            \"7fb411\", \"0023b8\", \"3b8c2a\", \"986b53\", \"f50422\", \"983f7a\", \"ea24a3\",\n            \"79352c\", \"521250\", \"c79ed2\", \"d6dd92\", \"e33e52\", \"b2be57\", \"fa06ec\",\n            \"1bb699\", \"6b2e5f\", \"64820f\", \"1c271\", \"9cb64a\", \"996c48\", \"9ab9b7\",\n            \"06e052\", \"e3a481\", \"0eb621\", \"fc458e\", \"b2db15\", \"aa226d\", \"792ed8\",\n            \"73872a\", \"520d3a\", \"cefcb8\", \"a5b3d9\", \"7d1d85\", \"c4fd57\", \"f1ae16\",\n            \"8fe22a\", \"ef6e3c\", \"243eeb\", \"1dc18\", \"dd93fd\", \"3f8473\", \"e7dbce\",\n            \"421f79\", \"7a3d93\", \"635f6d\", \"93f2d7\", \"9b5c2a\", \"15b9ee\", \"0f5997\",\n            \"409188\", \"911e20\", \"1350ce\", \"10e5b1\", \"fff4d7\", \"cb2582\", \"ce00be\",\n            \"32d5d6\", \"17232\", \"608572\", \"c79bc2\", \"00f87c\", \"77772a\", \"6995ba\",\n            \"fc6b57\", \"f07815\", \"8fd883\", \"060e27\", \"96e591\", \"21d52e\", \"d00043\",\n            \"b47162\", \"1ec227\", \"4f0f6f\", \"1d1d58\", \"947002\", \"bde052\", \"e08c56\",\n            \"28fcfd\", \"bb09b\", \"36486a\", \"d02e29\", \"1ae6db\", \"3e464c\", \"a84a8f\",\n            \"911e7e\", \"3f16d9\", \"0f525f\", \"ac7c0a\", \"b4c086\", \"c9d730\", \"30cc49\",\n            \"3d6751\", \"fb4c03\", \"640fc1\", \"62c03e\", \"d3493a\", \"88aa0b\", \"406df9\",\n            \"615af0\", \"4be47\", \"2a3434\", \"4a543f\", \"79bca0\", \"a8b8d4\", \"00efd4\",\n            \"7ad236\", \"7260d8\", \"1deaa7\", \"06f43a\", \"823c59\", \"e3d94c\", \"dc1c06\",\n            \"f53b2a\", \"b46238\", \"2dfff6\", \"a82b89\", \"1a8011\", \"436a9f\", \"1a806a\",\n            \"4cf09d\", \"c188a2\", \"67eb4b\", \"b308d3\", \"fc7e41\", \"af3101\", \"ff065\",\n            \"71b1f4\", \"a2f8a5\", \"e23dd0\", \"d3486d\", \"00f7f9\", \"474893\", \"3cec35\",\n            \"1c65cb\", \"5d1d0c\", \"2d7d2a\", \"ff3420\", \"5cdd87\", \"a259a4\", \"e4ac44\",\n            \"1bede6\", \"8798a4\", \"d7790f\", \"b2c24f\", \"de73c2\", \"d70a9c\", \"25b67\",\n            \"88e9b8\", \"c2b0e2\", \"86e98f\", \"ae90e2\", \"1a806b\", \"436a9e\", \"0ec0ff\",\n            \"f812b3\", \"b17fc9\", \"8d6c2f\", \"d3277a\", \"2ca1ae\", \"9685eb\", \"8a96c6\",\n            \"dba2e6\", \"76fc1b\", \"608fa4\", \"20f6ba\", \"07d7f6\", \"dce77a\", \"77ecca\"]\n\n        //call init function here\n        this.addLights()\n        this.makeScene()\n        this.animate()\n        this.createGUI()\n\n    }\n\n    getRandomColor(){\n\n        //random color\n        var color = new Color();\n        color.setHex(`0x${this.colorsArray[Math.floor(Math.random() * this.colorsArray.length)]}`);\n        if (color < 500) {\n            color.setHex(500);\n        }\n        return color\n\n    }\n\n    resize = (width, height) => {\n        this.camera.aspect = width / height\n        this.camera.updateProjectionMatrix()\n        this.renderer.setSize(width, height)\n        this.composer.setSize(width, height);\n        \n    }\n\n    addLights= () =>{\n        this.createAmbientLight();\n        this.createPointLight();\n    }\n\n    createAmbientLight = () => {\n        this.ambientLight = new AmbientLight(0x999999, 1);\n        this.scene.add(this.ambientLight);\n    };\n    \n    createPointLight = () => {\n        this.light = new PointLight(0xffffff, 0.3, 0);\n        this.light.castShadow = true;\n        this.light.shadow.mapSize.width = 5000;\n        this.light.shadow.mapSize.height = 5000;\n        this.light.position.set(0,20,-5);\n        this.scene.add(this.light);\n\n        const light = new PointLight(0xffffff, 0.2, 0);\n        light.castShadow = false;\n        light.position.set(0,30,50);\n        this.scene.add(light);\n    };\n\n\n    animate = () => {\n        \n        if (this.particleArr != null){\n            for(var i = 0; i < this.particleArr.length ; i++){\n                this.moveParticle(i)\n            }\n        }\n        this.composer.render();\n        //this.renderer.render( this.scene, this.camera )\n        requestAnimationFrame( this.animate )\n        this.controls.update();\n    }\n\n    moveParticle = (i) => {\n\n        var x = Math.ceil((this.particleArr [i].p.x)/this.res)-1\n        var y = Math.ceil((this.particleArr [i].p.y)/this.res)-1\n        // console.log(\"Value of boxes is:\", x, y)\n        // console.log(\"P.x: \", this.p.x,\"P.y: \", this.p.y)\n        var value = this.array_of_dir[x][y]\n\n        this.particleArr [i].p.vx += Math.cos(value) * -0.01\n        this.particleArr [i].p.vy += Math.sin(value) * 0.01\n        //this.p.x = x\n        //this.p.y = y\n\n        this.particleArr [i].p.x +=  this.particleArr [i].p.vx;\n        this.particleArr [i].p.y +=  this.particleArr [i].p.vy;\n\n        // apply some friction so point doesn't speed up too much\n        this.particleArr [i].p.vx *= 0.99;\n        this.particleArr [i].p.vy *= 0.99;\n\n        // wrap around edges of screen\n        if(this.particleArr [i].p.x > this.width) this.particleArr [i].p.x = 1;\n        if(this.particleArr [i].p.y > this.height) this.particleArr [i].p.y = 1;\n        if(this.particleArr [i].p.x < 0) this.particleArr [i].p.x = this.width;\n        if(this.particleArr [i].p.y < 0) this.particleArr [i].p.y = this.height;\n\n        this.particleArr [i].sphere.position.set(this.particleArr [i].p.x - this.width/2, this.particleArr [i].p.y - this.height/2)\n\n    }\n    \n\n    makeScene = () => {\n\n        //field setup\n        this.res = 25 // resolution\n        this.width = 450 // flowfield width and height\n        this.height = 450\n        this.num_p = 25 // number of particles\n        \n        //make an array of particles with position and velocity\n        this.particleArr = new Array()\n\n        for (var i = 0; i < this.num_p; i++){\n\n            var p = {\n                x: Math.random() * this.width,\n                y: Math.random() * this.height,\n                vx: 0,\n                vy: 0\n            }\n\n            var color = this.getRandomColor()\n            var sphere  = new Mesh(new SphereGeometry(5, 5, 32), new MeshBasicMaterial( {color: color} ))\n            sphere.position.set(p.x, p.y)\n            this.scene.add(sphere);\n\n            var particle = {\n                p:p, sphere:sphere\n            }\n\n            \n            this.particleArr[i] = particle\n            \n        }\n\n\n        //making array to store field values\n        this.array_of_boxes = new Array() // helper code to visualize field\n        this.array_of_dir = new Array() // array with all the vectors of the field\n\n        //with wireframed cones to visualize\n\n        var value; // for field\n        for(var x = 0; x < this.width; x+=this.res ){\n            //console.log(x/res)\n            this.array_of_dir[x/this.res] = new Array();\n            this.array_of_boxes[x/this.res] = new Array();\n\n            for(var y = 0; y < this.height; y+=this.res){\n                \n                //value = Math.PI/6\n\n                value = this.perlin.noise( x * 6.5, y * 6.5, 6.5);\n                //console.log(\"perlin noise \", value)\n\n               // const geometry = new ConeGeometry( 5, 25, 3 )\n               // const cone = new Mesh( geometry, new MeshBasicMaterial( {color: 0xff0000, wireframe:true} ))\n                \n                //var cube = new Mesh(new BoxGeometry(res, res, 1), new MeshBasicMaterial( {color: 0x00ff00, wireframe:true} ))\n               // cone.position.set(x-this.width/2+this.res/2, y-this,this.height/2+this.res/2, 10)\n               // cone.rotateZ(value)\n              //  this.scene.add( cone )\n\n                this.array_of_dir [x/this.res][y/this.res] = value\n              //  this.array_of_boxes[x/this.res][y/this.res] = cone\n\n            }\n        }\n    }\n    \n\n    createGUI = () => {\n\n        const gui = new GUI();\n        gui\n            .add( this.afterimagePass.uniforms[ 'damp' ], 'value', 0, 1 )\n            .step( 0.001 )\n            .name('Afterimage Damp')\n\n    }\n}\n\nexport default WebGLApp;\n\n\n\n\n    // makeGUI = (gui, folderName, obj) => {\n    //     //gui face\n    //     const objGUI = gui.addFolder(folderName);\n    //     objGUI\n    //         .add(obj.position,'x')\n    //         .min(-10)\n    //         .max(10)\n    //         .step(0.01)\n    //     objGUI\n    //         .add(obj.position,'y')\n    //         .min(-10)\n    //         .max(10)\n    //         .step(0.01)\n    //     objGUI\n    //         .add(obj.position,'z')\n    //         .min(-Math.PI)\n    //         .max(Math.PI)\n    //         .step(0.01)\n    //     objGUI\n    //         .add(obj.rotation,'x')\n    //         .min(-Math.PI)\n    //         .max(Math.PI)\n    //         .step(0.01)\n    //         .name('rotX')\n    //     objGUI\n    //         .add(obj.rotation,'y')\n    //         .min(-Math.PI)\n    //         .max(Math.PI)\n    //         .step(0.01)\n    //         .name('rotY')\n    //     objGUI\n    //         .add(obj.rotation,'z')\n    //         .min(-Math.PI)\n    //         .max(Math.PI)\n    //         .step(0.01)\n    //         .name('rotZ')\n    //     objGUI\n    //         .addColor(this.params, 'color')\n    //         .onChange(()=>{\n    //             obj.material.color.set(this.params.color)\n    //         })\n    //     objGUI.close()\n    // }\n\n\n// for (x=0; x < width ; x +-3){\n\n//     for (y = 0 y <height ; y +=3){\n\n//         cube (3,3)\n//         cube.position (x,y)\n\n\n//     }\n// }\n\n\n\n// COLORING BOXES CODE INSIDE ANIMATE FUNCTION\n\n\n\n            //apply boundaries here\n\n            // var x = Math.ceil((this.sphere.position.x + this.width/2)/this.resolution) - 1\n            // var y = Math.ceil((this.sphere.position.y + this.height/2)/this.resolution) - 1\n            \n            // // helper code -- TODO: replace it with reading box values and applying it to particle\n            // for (var m=0; m<this.array_of_boxes.length; m++){\n            //     for (var n=0; n<this.array_of_boxes.length; n++){\n\n            //         var temp = this.array_of_boxes[m][n]\n            //         //console.log(this.array_of_boxes)\n            //         temp.material.color = new Color(0x000000)\n            //         temp.material.needsUpdate = true\n\n            //        // this.sphere.\n                \n            //     }\n            // }\n            // var temp = this.array_of_boxes[x][y]\n            // //console.log(this.array_of_boxes)\n            // temp.material.color = new Color(0xff0000)\n            // temp.material.needsUpdate = true\n\n            // end of  helper code \n\n\n\n            //MOVING: just animating the sphere\n            // this.angle+=0.5;\n            // if(this.angle> 360){\n            //     this.angle=0;\n            // }\n            // this.sphere.position.x = Math.cos (this.angle * (Math.PI / 180)) * 120\n            // this.sphere.position.y = Math.sin (this.angle * (Math.PI / 180)) * 120\n            \n            //get value\n            // calculate new acceleration factor based on value direction\n            // and add that to point's velocity\n\n\n\n                    /*\n        In pseudocode, that's something like:\n\n        // starting point x = 500 y = 100\n        begin_curve()\n        for (n in [0..num_steps]) {\n            draw_vertex(x, y)\n            x_offset = x - left_x     y_offset = y - top_y\n            column_index = int(x_offset / resolution)     row_index = int(y_offset / resolution)\n            // NOTE: normally you want to check the bounds here     grid_angle = grid[column_index][row_index]\n            x_step = step_length * cos(grid_angle)     y_step = step_length * sin(grid_angle)\n            x = x + x_step     y = y + y_step }\n        end_curve()\n        */"]},"metadata":{},"sourceType":"module"}