{"ast":null,"code":"import { Scene, PerspectiveCamera, DirectionalLight, Mesh, MeshBasicMaterial, Vector3, PCFSoftShadowMap, Color, Group, BoxGeometry, CapsuleGeometry, SphereGeometry, CircleGeometry, ConeGeometry, Clock, WebGLRenderer, TextureLoader, BufferGeometry, BufferAttribute, CylinderGeometry, MeshPhongMaterial, DoubleSide, AmbientLight, PointLight, PlaneGeometry } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport GUI from 'lil-gui';\n\nclass WebGLApp {\n  constructor(parent) {\n    this.animate = () => {\n      this.renderer.render(this.scene, this.camera);\n      requestAnimationFrame(this.animate);\n      this.controls.update();\n    };\n\n    this.resize = (width, height) => {\n      this.camera.aspect = width / height;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(width, height);\n    };\n\n    this.addLights = () => {\n      this.createAmbientLight();\n      this.createPointLight();\n    };\n\n    this.createAmbientLight = () => {\n      this.ambientLight = new AmbientLight(0x999999, 1);\n      this.scene.add(this.ambientLight);\n    };\n\n    this.createPointLight = () => {\n      this.light = new PointLight(0xffffff, 0.3, 0);\n      this.light.castShadow = true;\n      this.light.shadow.mapSize.width = 5000;\n      this.light.shadow.mapSize.height = 5000;\n      this.light.position.set(0, 20, -5);\n      this.scene.add(this.light);\n      const light = new PointLight(0xffffff, 0.2, 0);\n      light.castShadow = false;\n      light.position.set(0, 30, 50);\n      this.scene.add(light);\n    };\n\n    this.makeScene = () => {\n      this.addLights(); //scene\n\n      gui.addColor(this.params, 'backgroundColor').onChange(() => {\n        this.scene.background.set(this.params.backgroundColor);\n      });\n      gui.close();\n    };\n\n    this.makeGUI = (gui, folderName, obj) => {\n      //gui face\n      const objGUI = gui.addFolder(folderName);\n      objGUI.add(obj.position, 'x').min(-10).max(10).step(0.01);\n      objGUI.add(obj.position, 'y').min(-10).max(10).step(0.01);\n      objGUI.add(obj.position, 'z').min(-Math.PI).max(Math.PI).step(0.01);\n      objGUI.add(obj.rotation, 'x').min(-Math.PI).max(Math.PI).step(0.01).name('rotX');\n      objGUI.add(obj.rotation, 'y').min(-Math.PI).max(Math.PI).step(0.01).name('rotY');\n      objGUI.add(obj.rotation, 'z').min(-Math.PI).max(Math.PI).step(0.01).name('rotZ');\n      objGUI.addColor(this.params, 'color').onChange(() => {\n        obj.material.color.set(this.params.color);\n      });\n      objGUI.close();\n    };\n\n    //the main function\n    this.params = {\n      color: 0xff0000,\n      backgroundColor: 0xe2f0f9\n    };\n    const aspect = window.innerWidth / window.innerHeight; // const clock = new Clock()\n    //set up scene\n\n    this.scene = new Scene();\n    this.scene.background = new Color(this.params.backgroundColor);\n    this.camera = new PerspectiveCamera(75, aspect, 0.1, 1000);\n    this.renderer = new WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.type = PCFSoftShadowMap;\n    this.scene.add(this.camera);\n    this.camera.position.z = 10; // controls\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement); // this.resize(window.innerWidth, window.innerHeight)\n\n    this.cursor = {\n      x: 0,\n      y: 0\n    };\n    parent.appendChild(this.renderer.domElement);\n    this.makeScene();\n    this.animate();\n  }\n\n}\n\nexport default WebGLApp;","map":{"version":3,"sources":["/Users/amnaazhar/Desktop/threejs-journey/chapters/chapter2-flowfields/src/webglapp.js"],"names":["Scene","PerspectiveCamera","DirectionalLight","Mesh","MeshBasicMaterial","Vector3","PCFSoftShadowMap","Color","Group","BoxGeometry","CapsuleGeometry","SphereGeometry","CircleGeometry","ConeGeometry","Clock","WebGLRenderer","TextureLoader","BufferGeometry","BufferAttribute","CylinderGeometry","MeshPhongMaterial","DoubleSide","AmbientLight","PointLight","PlaneGeometry","OrbitControls","GUI","WebGLApp","constructor","parent","animate","renderer","render","scene","camera","requestAnimationFrame","controls","update","resize","width","height","aspect","updateProjectionMatrix","setSize","addLights","createAmbientLight","createPointLight","ambientLight","add","light","castShadow","shadow","mapSize","position","set","makeScene","gui","addColor","params","onChange","background","backgroundColor","close","makeGUI","folderName","obj","objGUI","addFolder","min","max","step","Math","PI","rotation","name","material","color","window","innerWidth","innerHeight","antialias","shadowMap","enabled","type","z","domElement","cursor","x","y","appendChild"],"mappings":"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","sourcesContent":["import{\n    Scene,\n    PerspectiveCamera,\n    DirectionalLight,\n    Mesh,\n    MeshBasicMaterial,\n    Vector3,\n    PCFSoftShadowMap,\n    Color,\n    Group,\n    BoxGeometry,\n    CapsuleGeometry,\n    SphereGeometry,\n    CircleGeometry,\n    ConeGeometry,\n    Clock,\n    WebGLRenderer,\n    TextureLoader,\n    BufferGeometry,\n    BufferAttribute,\n    CylinderGeometry,\n    MeshPhongMaterial,\n    DoubleSide,\n    AmbientLight,\n    PointLight,\n    PlaneGeometry\n} from 'three'\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport GUI from 'lil-gui'; \n\nclass WebGLApp {\n\n    constructor(parent){\n        \n        //the main function\n        this.params = {\n            color: 0xff0000,\n            backgroundColor: 0xe2f0f9\n        }\n        const aspect = window.innerWidth / window.innerHeight\n       // const clock = new Clock()\n        //set up scene\n        this.scene = new Scene()\n        this.scene.background = new Color(this.params.backgroundColor);\n        this.camera = new PerspectiveCamera(75, aspect, 0.1, 1000)\n\n        this.renderer = new WebGLRenderer({antialias:true})\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.shadowMap.type = PCFSoftShadowMap;\n\n        this.scene.add( this.camera )\n        this.camera.position.z = 10\n\n        // controls\n        this.controls = new OrbitControls( this.camera, this.renderer.domElement );\n       // this.resize(window.innerWidth, window.innerHeight)\n       this.cursor = {\n            x: 0,\n            y: 0\n        }\n\n        parent.appendChild(this.renderer.domElement)\n        this.makeScene()\n        this.animate()\n\n    }\n\n    animate = () => {\n        \n        this.renderer.render( this.scene, this.camera )\n        requestAnimationFrame( this.animate )\n        this.controls.update();\n    }\n\n    resize = (width, height) => {\n        this.camera.aspect = width / height\n        this.camera.updateProjectionMatrix()\n        this.renderer.setSize(width, height)\n        \n    }\n\n    addLights= () =>{\n        this.createAmbientLight();\n        this.createPointLight();\n    }\n\n    createAmbientLight = () => {\n        this.ambientLight = new AmbientLight(0x999999, 1);\n        this.scene.add(this.ambientLight);\n    };\n    \n    createPointLight = () => {\n        this.light = new PointLight(0xffffff, 0.3, 0);\n        this.light.castShadow = true;\n        this.light.shadow.mapSize.width = 5000;\n        this.light.shadow.mapSize.height = 5000;\n        this.light.position.set(0,20,-5);\n        this.scene.add(this.light);\n\n        const light = new PointLight(0xffffff, 0.2, 0);\n        light.castShadow = false;\n        light.position.set(0,30,50);\n        this.scene.add(light);\n    };\n\n    makeScene = () => {\n\n        this.addLights()\n\n\n        //scene\n        gui\n        .addColor(this.params, 'backgroundColor')\n        .onChange(()=>{\n            this.scene.background.set(this.params.backgroundColor)\n        })\n\n        gui.close()\n\n    }\n    \n\n    makeGUI = (gui, folderName, obj) => {\n        //gui face\n        const objGUI = gui.addFolder(folderName);\n        objGUI\n            .add(obj.position,'x')\n            .min(-10)\n            .max(10)\n            .step(0.01)\n        objGUI\n            .add(obj.position,'y')\n            .min(-10)\n            .max(10)\n            .step(0.01)\n        objGUI\n            .add(obj.position,'z')\n            .min(-Math.PI)\n            .max(Math.PI)\n            .step(0.01)\n        objGUI\n            .add(obj.rotation,'x')\n            .min(-Math.PI)\n            .max(Math.PI)\n            .step(0.01)\n            .name('rotX')\n        objGUI\n            .add(obj.rotation,'y')\n            .min(-Math.PI)\n            .max(Math.PI)\n            .step(0.01)\n            .name('rotY')\n        objGUI\n            .add(obj.rotation,'z')\n            .min(-Math.PI)\n            .max(Math.PI)\n            .step(0.01)\n            .name('rotZ')\n        objGUI\n            .addColor(this.params, 'color')\n            .onChange(()=>{\n                obj.material.color.set(this.params.color)\n            })\n        objGUI.close()\n    }\n\n  \n\n}\n\nexport default WebGLApp;"]},"metadata":{},"sourceType":"module"}