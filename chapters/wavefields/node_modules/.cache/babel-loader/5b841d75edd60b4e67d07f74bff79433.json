{"ast":null,"code":"import { Scene, PerspectiveCamera, DirectionalLight, Mesh, MeshBasicMaterial, Vector3, PCFSoftShadowMap, Color, SphereGeometry, ConeGeometry, WebGLRenderer, AmbientLight, PointLight, Fog, Group } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport GUI from 'lil-gui';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { AfterimagePass } from 'three/examples/jsm/postprocessing/AfterimagePass.js';\nimport { ImprovedNoise } from 'three/examples/jsm/math/ImprovedNoise.js';\nimport colors from './colors.js';\n\nclass WebGLApp {\n  constructor(parent) {\n    this.resize = (width, height) => {\n      this.camera.aspect = width / height;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(width, height);\n      this.composer.setSize(width, height);\n    };\n\n    this.addLights = () => {\n      this.createAmbientLight();\n      this.createPointLight();\n    };\n\n    this.createAmbientLight = () => {\n      this.ambientLight = new AmbientLight(0x999999, 1);\n      this.scene.add(this.ambientLight);\n    };\n\n    this.createPointLight = () => {\n      this.light = new PointLight(0xffffff, 0.3, 0);\n      this.light.castShadow = true;\n      this.light.shadow.mapSize.width = 5000;\n      this.light.shadow.mapSize.height = 5000;\n      this.light.position.set(0, 20, -5);\n      this.scene.add(this.light);\n      const light = new PointLight(0xffffff, 0.2, 0);\n      light.castShadow = false;\n      light.position.set(0, 30, 50);\n      this.scene.add(light);\n    };\n\n    this.animate = () => {\n      if (this.particleArr != null) {\n        for (var i = 0; i < this.particleArr.length; i++) {\n          this.moveParticle(i);\n        }\n      }\n\n      this.composer.render();\n      requestAnimationFrame(this.animate);\n      this.controls.update();\n    };\n\n    this.moveParticle = i => {\n      var x = Math.ceil(this.particleArr[i].p.x / this.res) - 1;\n      var y = Math.ceil(this.particleArr[i].p.y / this.res) - 1;\n      var value = this.array_of_dir[x][y];\n      this.particleArr[i].p.vx += Math.cos(value) * -0.01;\n      this.particleArr[i].p.vy += Math.sin(value) * 0.01;\n      this.particleArr[i].p.x += this.particleArr[i].p.vx;\n      this.particleArr[i].p.y += this.particleArr[i].p.vy; // apply some friction so point doesn't speed up too much\n\n      this.particleArr[i].p.vx *= 0.99;\n      this.particleArr[i].p.vy *= 0.99; // wrap around edges of screen - boundaries\n\n      if (this.particleArr[i].p.x > this.width) this.particleArr[i].p.x = 1;\n      if (this.particleArr[i].p.y > this.height) this.particleArr[i].p.y = 1;\n      if (this.particleArr[i].p.x < 0) this.particleArr[i].p.x = this.width;\n      if (this.particleArr[i].p.y < 0) this.particleArr[i].p.y = this.height;\n      this.particleArr[i].sphere.position.set(this.particleArr[i].p.x - this.width / 2, this.particleArr[i].p.y - this.height / 2);\n    };\n\n    this.makeScene = () => {\n      //field setup\n      this.res = 25; // resolution\n\n      this.width = 450; // flowfield width and height\n\n      this.height = 450;\n      this.num_p = 25; // number of particles\n      //make an array of particles with position and velocity\n\n      this.particleArr = new Array();\n\n      for (var i = 0; i < this.num_p; i++) {\n        var p = {\n          x: Math.random() * this.width,\n          y: Math.random() * this.height,\n          vx: 0,\n          vy: 0\n        };\n        var color = this.getRandomColor();\n        var sphere = new Mesh(new SphereGeometry(5, 5, 32), new MeshBasicMaterial({\n          color: color\n        }));\n        sphere.position.set(p.x, p.y);\n        this.scene.add(sphere);\n        var particle = {\n          p: p,\n          sphere: sphere\n        };\n        this.particleArr[i] = particle;\n      } //making array to store field values\n\n\n      this.array_of_boxes = new Array(); // helper code to visualize field\n\n      this.array_of_dir = new Array(); // array with all the vectors of the field\n      //with wireframed cones to visualize\n      //TO DO: data from perlin\n      // understanding the data\n      // get the debug working\n      // to the image\n\n      var value; // for field\n\n      for (var x = 0; x < this.width; x += this.res) {\n        //console.log(x/res)\n        this.array_of_dir[x / this.res] = new Array();\n        this.array_of_boxes[x / this.res] = new Array();\n\n        for (var y = 0; y < this.height; y += this.res) {\n          value = this.perlin.noise(x * 0.65, y * 65, 0.65);\n          this.array_of_dir[x / this.res][y / this.res] = value * this.params.noise_value;\n        }\n      }\n\n      this.makeField();\n    };\n\n    this.makeField = () => {\n      let angle = 0;\n      this.field_lines = new Group();\n\n      for (var x = 0; x < this.width; x += this.res) {\n        for (var y = 0; y < this.height; y += this.res) {\n          angle = this.array_of_dir[x / this.res][y / this.res]; //console.log(\"show field \", angle)\n\n          const geometry = new ConeGeometry(1, 25, 1);\n          const cone = new Mesh(geometry, new MeshBasicMaterial({\n            color: 0xffffff,\n            wireframe: true\n          })); //white color\n\n          cone.position.set(x - this.width / 2 + this.res / 2, y - this.height / 2 + this.res / 2, 10);\n          cone.rotateZ(angle);\n          this.field_lines.add(cone);\n        }\n      } //field lines needs to be rotated horizontally to go from ' | ' to ' __ '\n\n\n      this.field_lines.rotateZ(Math.PI / 2);\n    };\n\n    this.showField = () => {\n      if (this.params.field) this.scene.add(this.field_lines);else this.scene.remove(this.field_lines);\n    };\n\n    this.createGUI = () => {\n      const gui = new GUI();\n      gui.add(this.afterimagePass.uniforms['damp'], 'value', 0, 1).step(0.001).name('PostProcessing Damp');\n      gui.add(this.params, \"field\").onChange(this.showField).name('Show field'); // gui\n      //     .add(this.params, \"noise_value\" , 'value', 0, 5)\n      //     .step( 0.1 )\n      //     .name('Noise value')\n    };\n\n    //the main function\n    // --- V A R S ----\n    this.params = {\n      color: 0xff0000,\n      backgroundColor: 0xe2f0f9,\n      field: true,\n      noise_value: 2\n    };\n    this.colorsArray = colors();\n    this.switch_field = false;\n    this.perlin = new ImprovedNoise(); // ---- BASIC SCENE SETUP----\n\n    const aspect = window.innerWidth / window.innerHeight; // const clock = new Clock()\n    //scene\n\n    this.scene = new Scene(); //this.scene.background = new Color(this.params.backgroundColor);\n    //add fog for trail fade\n\n    this.scene.fog = new Fog(0x000000, 1, 1000); // fog end\n    //camera setup\n\n    this.camera = new PerspectiveCamera(75, aspect, 0.1, 1000);\n    this.camera.position.z = -300;\n    this.scene.add(this.camera); //renderer set up\n\n    this.renderer = new WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.type = PCFSoftShadowMap;\n    parent.appendChild(this.renderer.domElement); // postprocessing\n\n    this.composer = new EffectComposer(this.renderer);\n    this.composer.addPass(new RenderPass(this.scene, this.camera));\n    this.afterimagePass = new AfterimagePass();\n    this.composer.addPass(this.afterimagePass); // controls set up\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement); //for cursor interaction\n    // this.cursor = {\n    //         x: 0,\n    //         y: 0\n    // }\n    //call init function here\n\n    this.addLights();\n    this.makeScene();\n    this.animate();\n    this.createGUI();\n  }\n\n  getRandomColor() {\n    //random color\n    var color = new Color();\n    color.setHex(`0x${this.colorsArray[Math.floor(Math.random() * this.colorsArray.length)]}`);\n\n    if (color < 500) {\n      color.setHex(500);\n    }\n\n    return color;\n  }\n\n}\n\nexport default WebGLApp;","map":{"version":3,"sources":["/Users/amnaazhar/Desktop/threejs-journey/chapters/chapter2-flowfields/src/webglapp.js"],"names":["Scene","PerspectiveCamera","DirectionalLight","Mesh","MeshBasicMaterial","Vector3","PCFSoftShadowMap","Color","SphereGeometry","ConeGeometry","WebGLRenderer","AmbientLight","PointLight","Fog","Group","OrbitControls","GUI","EffectComposer","RenderPass","AfterimagePass","ImprovedNoise","colors","WebGLApp","constructor","parent","resize","width","height","camera","aspect","updateProjectionMatrix","renderer","setSize","composer","addLights","createAmbientLight","createPointLight","ambientLight","scene","add","light","castShadow","shadow","mapSize","position","set","animate","particleArr","i","length","moveParticle","render","requestAnimationFrame","controls","update","x","Math","ceil","p","res","y","value","array_of_dir","vx","cos","vy","sin","sphere","makeScene","num_p","Array","random","color","getRandomColor","particle","array_of_boxes","perlin","noise","params","noise_value","makeField","angle","field_lines","geometry","cone","wireframe","rotateZ","PI","showField","field","remove","createGUI","gui","afterimagePass","uniforms","step","name","onChange","backgroundColor","colorsArray","switch_field","window","innerWidth","innerHeight","fog","z","antialias","shadowMap","enabled","type","appendChild","domElement","addPass","setHex","floor"],"mappings":"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","sourcesContent":["import{\n    Scene,\n    PerspectiveCamera,\n    DirectionalLight,\n    Mesh,\n    MeshBasicMaterial,\n    Vector3,\n    PCFSoftShadowMap,\n    Color,\n    SphereGeometry,\n    ConeGeometry,\n    WebGLRenderer,\n    AmbientLight,\n    PointLight,\n    Fog,\n    Group\n} from 'three'\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport GUI from 'lil-gui'; \nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { AfterimagePass } from 'three/examples/jsm/postprocessing/AfterimagePass.js';\nimport { ImprovedNoise } from 'three/examples/jsm/math/ImprovedNoise.js';\nimport colors from './colors.js'\n\nclass WebGLApp {\n\n    constructor(parent){\n        \n        //the main function\n\n        // --- V A R S ----\n        this.params = {\n            color: 0xff0000,\n            backgroundColor: 0xe2f0f9,\n            field: true,\n            noise_value: 2\n        }\n        this.colorsArray = colors()\n        this.switch_field = false\n        this.perlin = new ImprovedNoise()\n    \n        // ---- BASIC SCENE SETUP----\n        const aspect = window.innerWidth / window.innerHeight\n        // const clock = new Clock()\n       \n        //scene\n        this.scene = new Scene()\n        //this.scene.background = new Color(this.params.backgroundColor);\n        \n        //add fog for trail fade\n        this.scene.fog = new Fog( 0x000000, 1, 1000 );\n        // fog end\n        \n        //camera setup\n        this.camera = new PerspectiveCamera(75, aspect, 0.1, 1000)\n        this.camera.position.z = -300\n        this.scene.add( this.camera )\n\n        //renderer set up\n        this.renderer = new WebGLRenderer({antialias:true})\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.shadowMap.type = PCFSoftShadowMap;\n        parent.appendChild(this.renderer.domElement)\n\n        // postprocessing\n        this.composer = new EffectComposer( this.renderer );\n        this.composer.addPass( new RenderPass( this.scene, this.camera));\n        this.afterimagePass = new AfterimagePass();\n        this.composer.addPass( this.afterimagePass );\n\n        // controls set up\n        this.controls = new OrbitControls( this.camera, this.renderer.domElement );\n       \n        //for cursor interaction\n        // this.cursor = {\n        //         x: 0,\n        //         y: 0\n        // }\n\n        //call init function here\n        this.addLights()\n        this.makeScene()\n        this.animate()\n        this.createGUI()\n\n    }\n\n    getRandomColor(){\n\n        //random color\n        var color = new Color();\n        color.setHex(`0x${this.colorsArray[Math.floor(Math.random() * this.colorsArray.length)]}`);\n        if (color < 500) {\n            color.setHex(500);\n        }\n        return color\n\n    }\n\n    resize = (width, height) => {\n        this.camera.aspect = width / height\n        this.camera.updateProjectionMatrix()\n        this.renderer.setSize(width, height)\n        this.composer.setSize(width, height);\n        \n    }\n\n    addLights= () =>{\n        this.createAmbientLight();\n        this.createPointLight();\n    }\n\n    createAmbientLight = () => {\n        this.ambientLight = new AmbientLight(0x999999, 1);\n        this.scene.add(this.ambientLight);\n    };\n    \n    createPointLight = () => {\n        this.light = new PointLight(0xffffff, 0.3, 0);\n        this.light.castShadow = true;\n        this.light.shadow.mapSize.width = 5000;\n        this.light.shadow.mapSize.height = 5000;\n        this.light.position.set(0,20,-5);\n        this.scene.add(this.light);\n\n        const light = new PointLight(0xffffff, 0.2, 0);\n        light.castShadow = false;\n        light.position.set(0,30,50);\n        this.scene.add(light);\n    };\n\n\n    animate = () => {\n        \n        if (this.particleArr != null){\n            for(var i = 0; i < this.particleArr.length ; i++){\n                this.moveParticle(i)\n            }\n        }\n\n        this.composer.render();\n        requestAnimationFrame( this.animate )\n        this.controls.update();\n    }\n\n    moveParticle = (i) => {\n\n        var x = Math.ceil((this.particleArr [i].p.x)/this.res)-1\n        var y = Math.ceil((this.particleArr [i].p.y)/this.res)-1\n        var value = this.array_of_dir[x][y]\n\n        this.particleArr [i].p.vx += Math.cos(value) * -0.01\n        this.particleArr [i].p.vy += Math.sin(value) * 0.01\n\n        this.particleArr [i].p.x +=  this.particleArr [i].p.vx;\n        this.particleArr [i].p.y +=  this.particleArr [i].p.vy;\n\n        // apply some friction so point doesn't speed up too much\n        this.particleArr [i].p.vx *= 0.99;\n        this.particleArr [i].p.vy *= 0.99;\n\n        // wrap around edges of screen - boundaries\n        if(this.particleArr [i].p.x > this.width) this.particleArr [i].p.x = 1;\n        if(this.particleArr [i].p.y > this.height) this.particleArr [i].p.y = 1;\n        if(this.particleArr [i].p.x < 0) this.particleArr [i].p.x = this.width;\n        if(this.particleArr [i].p.y < 0) this.particleArr [i].p.y = this.height;\n\n        this.particleArr [i].sphere.position.set(this.particleArr [i].p.x - this.width/2, this.particleArr [i].p.y - this.height/2)\n\n    }\n    \n\n    makeScene = () => {\n\n        //field setup\n        this.res = 25 // resolution\n        this.width = 450 // flowfield width and height\n        this.height = 450\n        this.num_p = 25 // number of particles\n        \n        //make an array of particles with position and velocity\n        this.particleArr = new Array()\n\n        for (var i = 0; i < this.num_p; i++){\n\n            var p = {\n                x: Math.random() * this.width,\n                y: Math.random() * this.height,\n                vx: 0,\n                vy: 0\n            }\n\n            var color = this.getRandomColor()\n            var sphere  = new Mesh(new SphereGeometry(5, 5, 32), new MeshBasicMaterial( {color: color} ))\n            sphere.position.set(p.x, p.y)\n            this.scene.add(sphere);\n\n            var particle = {\n                p:p, sphere:sphere\n            }\n\n            this.particleArr[i] = particle\n            \n        }\n\n\n        //making array to store field values\n        this.array_of_boxes = new Array() // helper code to visualize field\n        this.array_of_dir = new Array() // array with all the vectors of the field\n\n        //with wireframed cones to visualize\n\n        //TO DO: data from perlin\n       // understanding the data\n       // get the debug working\n       // to the image\n\n        var value; // for field\n        for(var x = 0; x < this.width; x+=this.res ){\n            //console.log(x/res)\n            this.array_of_dir[x/this.res] = new Array();\n            this.array_of_boxes[x/this.res] = new Array();\n\n            for(var y = 0; y < this.height; y+=this.res){\n\n                value = this.perlin.noise( x * 0.65, y * 65, 0.65);\n\n                this.array_of_dir [x/this.res][y/this.res] = value * this.params.noise_value\n\n            }\n        }\n\n        this.makeField();\n    }\n\n    makeField = () => {\n\n        let angle = 0;\n        this.field_lines = new Group();\n       \n        for(var x = 0; x < this.width; x+=this.res ){\n\n            for(var y = 0; y < this.height; y+=this.res){\n                \n                angle = this.array_of_dir[x/this.res][y/this.res]\n                //console.log(\"show field \", angle)\n\n                const geometry = new ConeGeometry( 1, 25, 1 )\n                const cone = new Mesh( geometry, new MeshBasicMaterial( {color: 0xffffff, wireframe:true} )) //white color\n                cone.position.set(x-this.width/2+this.res/2, y-this.height/2+this.res/2, 10)\n                cone.rotateZ(angle)\n                this.field_lines.add(cone)\n\n            }\n        }\n        //field lines needs to be rotated horizontally to go from ' | ' to ' __ '\n        this.field_lines.rotateZ (Math.PI/2)\n\n    }\n\n    showField = () => {\n\n        if(this.params.field) this.scene.add(this.field_lines)\n        else this.scene.remove(this.field_lines)\n\n    }\n    \n\n    createGUI = () => {\n\n        const gui = new GUI();\n        gui\n            .add( this.afterimagePass.uniforms[ 'damp' ], 'value', 0, 1 )\n            .step( 0.001 )\n            .name('PostProcessing Damp')\n        gui\n            .add(this.params, \"field\")\n            .onChange(this.showField)\n            .name('Show field')\n        // gui\n        //     .add(this.params, \"noise_value\" , 'value', 0, 5)\n        //     .step( 0.1 )\n        //     .name('Noise value')\n    }\n}\n\nexport default WebGLApp;\n"]},"metadata":{},"sourceType":"module"}