[{"/Users/amnaazhar/Desktop/threejs-journey/chapters/chapter2-flowfields/src/index.js":"1","/Users/amnaazhar/Desktop/threejs-journey/chapters/chapter2-flowfields/src/App.js":"2","/Users/amnaazhar/Desktop/threejs-journey/chapters/chapter2-flowfields/src/reportWebVitals.js":"3","/Users/amnaazhar/Desktop/threejs-journey/chapters/chapter2-flowfields/src/webglapp.js":"4","/Users/amnaazhar/Desktop/threejs-journey/chapters/chapter2-flowfields/src/colors.js":"5","/Users/amnaazhar/Desktop/threejs-journey/chapters/wavefields/src/index.js":"6","/Users/amnaazhar/Desktop/threejs-journey/chapters/wavefields/src/App.js":"7","/Users/amnaazhar/Desktop/threejs-journey/chapters/wavefields/src/reportWebVitals.js":"8","/Users/amnaazhar/Desktop/threejs-journey/chapters/wavefields/src/webglapp.js":"9","/Users/amnaazhar/Desktop/threejs-journey/chapters/wavefields/src/colors.js":"10"},{"size":500,"mtime":1655161907766,"results":"11","hashOfConfig":"12"},{"size":610,"mtime":1655171894825,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1655161907766,"results":"14","hashOfConfig":"12"},{"size":9518,"mtime":1661367676122,"results":"15","hashOfConfig":"12"},{"size":2994,"mtime":1659519284068,"results":"16","hashOfConfig":"12"},{"size":500,"mtime":1661367759226,"results":"17","hashOfConfig":"18"},{"size":610,"mtime":1661367759222,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1661367759227,"results":"20","hashOfConfig":"18"},{"size":10477,"mtime":1661370321118,"results":"21","hashOfConfig":"18"},{"size":2994,"mtime":1661367759224,"results":"22","hashOfConfig":"18"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1seehjc",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pne7jp",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/amnaazhar/Desktop/threejs-journey/chapters/chapter2-flowfields/src/index.js",[],[],"/Users/amnaazhar/Desktop/threejs-journey/chapters/chapter2-flowfields/src/App.js",["57"],[],"import './App.css';\nimport React, {useEffect, useRef} from \"react\"\nimport WebGLApp from \"./webglapp\";\n\nfunction App() {\n\n  const containerRef = useRef(null); // for the canvas\n  const webglApp = useRef(null);\n\n  useEffect(()=>{\n\n    if(containerRef == null) return;\n\n    webglApp.current = new WebGLApp(containerRef.current, {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    })\n\n    function onResize () {\n      webglApp.current.resize(window.innerWidth, window.innerHeight);\n    }\n\n  },[])\n\n\n  return (\n    <div className=\"App\" ref={containerRef}>\n    </div>\n  );\n}\n\nexport default App;\n",["58","59"],"/Users/amnaazhar/Desktop/threejs-journey/chapters/chapter2-flowfields/src/reportWebVitals.js",[],[],"/Users/amnaazhar/Desktop/threejs-journey/chapters/chapter2-flowfields/src/webglapp.js",["60"],["61","62","63","64","65"],"/* eslint-disable no-array-constructor */\nimport{\n    Scene,\n    PerspectiveCamera,\n    Mesh,\n    MeshBasicMaterial,\n    PCFSoftShadowMap,\n    Color,\n    SphereGeometry,\n    ConeGeometry,\n    WebGLRenderer,\n    AmbientLight,\n    PointLight,\n    Fog,\n    Group,\n    Clock\n} from 'three'\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport GUI from 'lil-gui'; \nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { AfterimagePass } from 'three/examples/jsm/postprocessing/AfterimagePass.js';\nimport { ImprovedNoise } from 'three/examples/jsm/math/ImprovedNoise.js';\nimport colors from './colors.js'\n\nclass WebGLApp {\n\n    constructor(parent){\n        \n        //the main function\n\n        // --- V A R S ----\n        this.params = {\n            color: 0xff0000,\n            backgroundColor: 0xe2f0f9,\n            showfield: true,\n            animatefield: false,\n            noise_value: 2\n        }\n        this.colorsArray = colors()\n        this.switch_field = false\n        this.perlin = new ImprovedNoise()\n        this.delta=0\n        //this.clock = new Clock();\n        // ---- BASIC SCENE SETUP----\n        const aspect = window.innerWidth / window.innerHeight\n        // const clock = new Clock()\n       \n        //scene\n        this.scene = new Scene()\n        //this.scene.background = new Color(this.params.backgroundColor);\n        \n        //add fog for trail fade\n        this.scene.fog = new Fog( 0x000000, 1, 1000 );\n        // fog end\n        \n        //camera setup\n        this.camera = new PerspectiveCamera(75, aspect, 0.1, 1000)\n        this.camera.position.z = -300\n        this.scene.add( this.camera )\n\n        //renderer set up\n        this.renderer = new WebGLRenderer({antialias:true})\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.shadowMap.type = PCFSoftShadowMap;\n        parent.appendChild(this.renderer.domElement)\n\n        // postprocessing\n        this.composer = new EffectComposer( this.renderer );\n        this.composer.addPass( new RenderPass( this.scene, this.camera));\n        this.afterimagePass = new AfterimagePass();\n        this.composer.addPass( this.afterimagePass );\n\n        // controls set up\n        this.controls = new OrbitControls( this.camera, this.renderer.domElement );\n       \n        //for cursor interaction\n        // this.cursor = {\n        //         x: 0,\n        //         y: 0\n        // }\n\n        //call init function here\n        this.addLights()\n        this.makeScene()\n        this.animate()\n        this.createGUI()\n\n    }\n\n    getRandomColor(){\n\n        //random color\n        var color = new Color();\n        color.setHex(`0x${this.colorsArray[Math.floor(Math.random() * this.colorsArray.length)]}`);\n        if (color < 500) {\n            color.setHex(500);\n        }\n        return color\n\n    }\n\n    resize = (width, height) => {\n        this.camera.aspect = width / height\n        this.camera.updateProjectionMatrix()\n        this.renderer.setSize(width, height)\n        this.composer.setSize(width, height);\n        \n    }\n\n    addLights= () =>{\n        this.createAmbientLight();\n        this.createPointLight();\n    }\n\n    createAmbientLight = () => {\n        this.ambientLight = new AmbientLight(0x999999, 1);\n        this.scene.add(this.ambientLight);\n    };\n    \n    createPointLight = () => {\n        this.light = new PointLight(0xffffff, 0.3, 0);\n        this.light.castShadow = true;\n        this.light.shadow.mapSize.width = 5000;\n        this.light.shadow.mapSize.height = 5000;\n        this.light.position.set(0,20,-5);\n        this.scene.add(this.light);\n\n        const light = new PointLight(0xffffff, 0.2, 0);\n        light.castShadow = false;\n        light.position.set(0,30,50);\n        this.scene.add(light);\n    };\n\n\n    animate = () => {\n        \n        if (this.particleArr != null && this.array_of_dir != null && this.field_lines != null){\n            if(this.params.animatefield) this.animateField();\n            for(var i = 0; i < this.particleArr.length ; i++){\n                this.moveParticle(i)\n            }\n        }\n\n        this.composer.render();\n        requestAnimationFrame( this.animate )\n        this.controls.update();\n    }\n\n    moveParticle = (i) => {\n\n        var x = Math.ceil((this.particleArr[i].p.x)/this.res)-1\n        var y = Math.ceil((this.particleArr[i].p.y)/this.res)-1\n        var value = this.array_of_dir[x][y]\n\n        this.particleArr[i].p.vx += Math.cos(value) * -0.01 \n        this.particleArr[i].p.vy += Math.sin(value) * 0.01\n\n        this.particleArr[i].p.x +=  this.particleArr[i].p.vx;\n        this.particleArr[i].p.y +=  this.particleArr[i].p.vy;\n\n        // apply some friction so point doesn't speed up too much\n        this.particleArr[i].p.vx *= 0.99;\n        this.particleArr[i].p.vy *= 0.99;\n\n        // wrap around edges of screen - boundaries\n        if(this.particleArr[i].p.x > this.width) this.particleArr[i].p.x = 1;\n        if(this.particleArr[i].p.y > this.height) this.particleArr[i].p.y = 1;\n        if(this.particleArr[i].p.x < 0) this.particleArr[i].p.x = this.width;\n        if(this.particleArr[i].p.y < 0) this.particleArr[i].p.y = this.height;\n\n        this.particleArr[i].sphere.position.set(this.particleArr[i].p.x - this.width/2, this.particleArr[i].p.y - this.height/2)\n\n    }\n    \n\n    makeScene = () => {\n\n        //field setup\n        this.res = 25 // resolution\n        this.width = 450 // flowfield width and height\n        this.height = 450\n        this.num_p = 25 // number of particles\n        \n        //make an array of particles with position and velocity\n        this.particleArr = new Array()\n\n        for (var i = 0; i < this.num_p; i++){\n\n            var p = {\n                x: Math.random() * this.width,\n                y: Math.random() * this.height,\n                vx: 0,\n                vy: 0\n            }\n\n            var color = this.getRandomColor()\n            var sphere  = new Mesh(new SphereGeometry(5, 5, 32), new MeshBasicMaterial( {color: color} ))\n            sphere.position.set(p.x, p.y)\n            this.scene.add(sphere);\n\n            var particle = {\n                p:p, sphere:sphere\n            }\n\n            this.particleArr[i] = particle\n            \n        }\n\n\n        //making array to store field values\n        this.array_of_boxes = new Array() // helper code to visualize field\n        this.array_of_dir = new Array() // array with all the vectors of the field\n\n        //with wireframed cones to visualize\n\n        //TO DO: data from perlin\n       // understanding the data\n       // get the debug working\n       // to the image\n\n        var value; // for field\n        for(var x = 0; x < this.width; x+=this.res ){\n            //console.log(x/res)\n            this.array_of_dir[x/this.res] = new Array();\n            this.array_of_boxes[x/this.res] = new Array();\n\n            for(var y = 0; y < this.height; y+=this.res){\n\n                value = this.perlin.noise( x * 0.65, y * 65, 0.65);\n\n                this.array_of_dir[x/this.res][y/this.res] = value * this.params.noise_value\n\n            }\n        }\n\n        this.makeField();\n    }\n\n    makeField = () => {\n\n        let angle = 0;\n        this.field_lines = new Group();\n       \n        for(var x = 0; x < this.width; x+=this.res ){\n\n            for(var y = 0; y < this.height; y+=this.res){\n                \n                angle = this.array_of_dir[x/this.res][y/this.res]\n                //console.log(\"show field \", angle)\n\n                const geometry = new ConeGeometry( 1, 25, 1 )\n                const cone = new Mesh( geometry, new MeshBasicMaterial( {color: 0xffffff, wireframe:true} )) //white color\n                cone.position.set(x-this.width/2+this.res/2, y-this.height/2+this.res/2, 10)\n                cone.rotateZ(angle)\n                this.field_lines.add(cone)\n\n            }\n        }\n        //field lines needs to be rotated horizontally to go from ' | ' to ' __ '\n        this.field_lines.rotateZ (Math.PI/2)\n\n        this.showField();\n\n    }\n\n    showField = () => {\n\n        if(this.params.showfield) this.scene.add(this.field_lines)\n        else this.scene.remove(this.field_lines)\n\n    }\n\n    animateField = () => {\n        let value;\n        let num=0;\n        for(var x = 0; x < this.width; x+=this.res ){\n            for(var y = 0; y < this.height; y+=this.res){\n\n                value = this.perlin.noise( x * 0.65, y * 65, this.delta);\n\n                this.array_of_dir[x/this.res][y/this.res] = value * this.params.noise_value\n                this.field_lines.children[num].rotateZ(value * this.params.noise_value)\n                num++\n            }\n        }\n        this.delta+= 0.00005\n    }\n    \n\n    createGUI = () => {\n\n        const gui = new GUI();\n        gui\n            .add( this.afterimagePass.uniforms[ 'damp' ], 'value', 0, 1 )\n            .step( 0.001 )\n            .name('PostProcessing Damp')\n        gui\n            .add(this.params, \"showfield\")\n            .onChange(this.showField)\n            .name('Show field')\n        gui\n            .add(this.params, \"animatefield\")\n            .onChange(this.animateField)\n            .name('Animate field')\n        // gui\n        //     .add(this.params, \"noise_value\" , 'value', 0, 5)\n        //     .step( 0.1 )\n        //     .name('Noise value')\n    }\n}\n\nexport default WebGLApp;\n","/Users/amnaazhar/Desktop/threejs-journey/chapters/chapter2-flowfields/src/colors.js",["66"],[],"/Users/amnaazhar/Desktop/threejs-journey/chapters/wavefields/src/index.js",[],[],"/Users/amnaazhar/Desktop/threejs-journey/chapters/wavefields/src/App.js",["67"],[],"/Users/amnaazhar/Desktop/threejs-journey/chapters/wavefields/src/reportWebVitals.js",[],[],"/Users/amnaazhar/Desktop/threejs-journey/chapters/wavefields/src/webglapp.js",["68","69"],[],"/* eslint-disable no-array-constructor */\nimport{\n    Scene,\n    PerspectiveCamera,\n    Mesh,\n    MeshBasicMaterial,\n    PCFSoftShadowMap,\n    Color,\n    SphereGeometry,\n    ConeGeometry,\n    WebGLRenderer,\n    AmbientLight,\n    PointLight,\n    Fog,\n    Group,\n    PlaneBufferGeometry,\n    LineSegments,\n    WireframeGeometry,\n    LineBasicMaterial,\n} from 'three'\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport GUI from 'lil-gui'; \n// import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\n// import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\n// import { AfterimagePass } from 'three/examples/jsm/postprocessing/AfterimagePass.js';\nimport { ImprovedNoise } from 'three/examples/jsm/math/ImprovedNoise.js';\nimport colors from './colors.js'\n\nclass WebGLApp {\n\n    constructor(parent){\n        \n        //the main function\n\n        // --- V A R S ----\n        this.params = {\n            color: 0xff0000,\n            backgroundColor: 0xe2f0f9,\n            showfield: true,\n            animatefield: false,\n            noise_value: 2\n        }\n        this.colorsArray = colors()\n        this.switch_field = false\n        this.perlin = new ImprovedNoise()\n        this.delta=0\n        //this.clock = new Clock();\n        // ---- BASIC SCENE SETUP----\n        const aspect = window.innerWidth / window.innerHeight\n       \n        //scene\n        this.scene = new Scene()\n        //this.scene.background = new Color(this.params.backgroundColor);\n        \n        //add fog for trail fade\n        this.scene.fog = new Fog( 0x000000, 1, 1000 );\n        // fog end\n        \n        //camera setup\n        this.camera = new PerspectiveCamera(75, aspect, 0.1, 1000)\n        this.camera.position.z = -300\n        this.scene.add( this.camera )\n\n        //renderer set up\n        this.renderer = new WebGLRenderer({antialias:true})\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.shadowMap.type = PCFSoftShadowMap;\n        parent.appendChild(this.renderer.domElement)\n\n        // postprocessing\n        // this.composer = new EffectComposer( this.renderer );\n        // this.composer.addPass( new RenderPass( this.scene, this.camera));\n        // this.afterimagePass = new AfterimagePass();\n        // this.composer.addPass( this.afterimagePass );\n\n        // controls set up\n        this.controls = new OrbitControls( this.camera, this.renderer.domElement );\n\n        //call init function here\n        this.addLights()\n        this.makeScene()\n        this.animate()\n        this.createGUI()\n\n    }\n\n    getRandomColor(){\n\n        //random color\n        var color = new Color();\n        color.setHex(`0x${this.colorsArray[Math.floor(Math.random() * this.colorsArray.length)]}`);\n        if (color < 500) {\n            color.setHex(500);\n        }\n        return color\n\n    }\n\n    resize = (width, height) => {\n        this.camera.aspect = width / height\n        this.camera.updateProjectionMatrix()\n        this.renderer.setSize(width, height)\n        this.composer.setSize(width, height);\n        \n    }\n\n    addLights= () =>{\n        this.createAmbientLight();\n        this.createPointLight();\n    }\n\n    createAmbientLight = () => {\n        this.ambientLight = new AmbientLight(0x999999, 1);\n        this.scene.add(this.ambientLight);\n    };\n    \n    createPointLight = () => {\n        this.light = new PointLight(0xffffff, 0.3, 0);\n        this.light.castShadow = true;\n        this.light.shadow.mapSize.width = 5000;\n        this.light.shadow.mapSize.height = 5000;\n        this.light.position.set(0,20,-5);\n        this.scene.add(this.light);\n\n        const light = new PointLight(0xffffff, 0.2, 0);\n        light.castShadow = false;\n        light.position.set(0,30,50);\n        this.scene.add(light);\n    };\n\n\n    animate = () => {\n\n\n        this.delta += 0.0025\n        // if (this.particleArr != null && this.array_of_dir != null && this.field_lines != null){\n        //     if(this.params.animatefield) this.animateField();\n        //     for(var i = 0; i < this.particleArr.length ; i++){\n        //         this.moveParticle(i)\n        //     }\n        // }\n\n        if(this.line){\n            this.updateVertices(this.line);\n        }\n        this.renderer.render( this.scene, this.camera )\n        //this.composer.render();\n        requestAnimationFrame( this.animate )\n        this.controls.update();\n    }\n\n    makeGeometry = () => {\n        var geometry = new PlaneBufferGeometry(this.width, this.height, 25,25)\n        this.line = new LineSegments(new WireframeGeometry(geometry), new LineBasicMaterial({color: 0xffffff}))\n        this.line.rotation.x = Math.PI/4\n        this.scene.add(this.line)\n\n    }\n\n    updateVertices(geom){\n\n        var vertices = geom.geometry.attributes.position.array;\n        //console.log(Math.random())\n        for(var i = 0; i<=vertices.length;i+=3){\n            vertices[i+2] = this.perlin.noise (vertices[i]/800 + this.delta, vertices[i+1]/800 + this.delta, 0.65) *300\n        }\n        geom.geometry.attributes.position.needsUpdate = true;\n    }\n\n    moveParticle = (i) => {\n\n        var x = Math.ceil((this.particleArr[i].p.x)/this.res)-1\n        var y = Math.ceil((this.particleArr[i].p.y)/this.res)-1\n        var value = this.array_of_dir[x][y]\n\n        this.particleArr[i].p.vx += Math.cos(value) * -0.01 \n        this.particleArr[i].p.vy += Math.sin(value) * 0.01\n\n        this.particleArr[i].p.x +=  this.particleArr[i].p.vx;\n        this.particleArr[i].p.y +=  this.particleArr[i].p.vy;\n\n        // apply some friction so point doesn't speed up too much\n        this.particleArr[i].p.vx *= 0.99;\n        this.particleArr[i].p.vy *= 0.99;\n\n        // wrap around edges of screen - boundaries\n        if(this.particleArr[i].p.x > this.width) this.particleArr[i].p.x = 1;\n        if(this.particleArr[i].p.y > this.height) this.particleArr[i].p.y = 1;\n        if(this.particleArr[i].p.x < 0) this.particleArr[i].p.x = this.width;\n        if(this.particleArr[i].p.y < 0) this.particleArr[i].p.y = this.height;\n\n        this.particleArr[i].sphere.position.set(this.particleArr[i].p.x - this.width/2, this.particleArr[i].p.y - this.height/2)\n\n    }\n    \n\n    makeScene = () => {\n\n        //field setup\n        this.res = 25 // resolution\n        this.width = 450 // flowfield width and height\n        this.height = 450\n        this.num_p = 25 // number of particles\n        \n        this.makeGeometry();\n\n        //make an array of particles with position and velocity\n    //     this.particleArr = new Array()\n\n    //     for (var i = 0; i < this.num_p; i++){\n\n    //         var p = {\n    //             x: Math.random() * this.width,\n    //             y: Math.random() * this.height,\n    //             vx: 0,\n    //             vy: 0\n    //         }\n\n    //         var color = this.getRandomColor()\n    //         var sphere  = new Mesh(new SphereGeometry(5, 5, 32), new MeshBasicMaterial( {color: color} ))\n    //         sphere.position.set(p.x, p.y)\n    //         this.scene.add(sphere);\n\n    //         var particle = {\n    //             p:p, sphere:sphere\n    //         }\n\n    //         this.particleArr[i] = particle\n            \n    //     }\n\n\n    //     //making array to store field values\n    //     this.array_of_boxes = new Array() // helper code to visualize field\n    //     this.array_of_dir = new Array() // array with all the vectors of the field\n\n    //     //with wireframed cones to visualize\n\n    //     //TO DO: data from perlin\n    //    // understanding the data\n    //    // get the debug working\n    //    // to the image\n\n    //     var value; // for field\n    //     for(var x = 0; x < this.width; x+=this.res ){\n    //         //console.log(x/res)\n    //         this.array_of_dir[x/this.res] = new Array();\n    //         this.array_of_boxes[x/this.res] = new Array();\n\n    //         for(var y = 0; y < this.height; y+=this.res){\n\n    //             value = this.perlin.noise( x * 0.65, y * 65, 0.65);\n\n    //             this.array_of_dir[x/this.res][y/this.res] = value * this.params.noise_value\n\n    //         }\n    //     }\n\n    //     this.makeField();\n    }\n\n    makeField = () => {\n\n        let angle = 0;\n        this.field_lines = new Group();\n       \n        for(var x = 0; x < this.width; x+=this.res ){\n\n            for(var y = 0; y < this.height; y+=this.res){\n                \n                angle = this.array_of_dir[x/this.res][y/this.res]\n                //console.log(\"show field \", angle)\n\n                const geometry = new ConeGeometry( 1, 25, 1 )\n                const cone = new Mesh( geometry, new MeshBasicMaterial( {color: 0xffffff, wireframe:true} )) //white color\n                cone.position.set(x-this.width/2+this.res/2, y-this.height/2+this.res/2, 10)\n                cone.rotateZ(angle)\n                this.field_lines.add(cone)\n\n            }\n        }\n        //field lines needs to be rotated horizontally to go from ' | ' to ' __ '\n        this.field_lines.rotateZ (Math.PI/2)\n\n        this.showField();\n\n    }\n\n    showField = () => {\n\n        if(this.params.showfield) this.scene.add(this.field_lines)\n        else this.scene.remove(this.field_lines)\n\n    }\n\n    animateField = () => {\n        let value;\n        let num=0;\n        for(var x = 0; x < this.width; x+=this.res ){\n            for(var y = 0; y < this.height; y+=this.res){\n\n                value = this.perlin.noise( x * 0.65, y * 65, this.delta);\n\n                this.array_of_dir[x/this.res][y/this.res] = value * this.params.noise_value\n                this.field_lines.children[num].rotateZ(value * this.params.noise_value)\n                num++\n            }\n        }\n        this.delta+= 0.00005\n    }\n    \n\n    createGUI = () => {\n\n        const gui = new GUI();\n        // gui\n        //     .add( this.afterimagePass.uniforms[ 'damp' ], 'value', 0, 1 )\n        //     .step( 0.001 )\n        //     .name('PostProcessing Damp')\n        // gui\n        //     .add(this.params, \"showfield\")\n        //     .onChange(this.showField)\n        //     .name('Show field')\n        // gui\n        //     .add(this.params, \"animatefield\")\n        //     .onChange(this.animateField)\n        //     .name('Animate field')\n        // gui\n        //     .add(this.params, \"noise_value\" , 'value', 0, 5)\n        //     .step( 0.1 )\n        //     .name('Noise value')\n    }\n}\n\nexport default WebGLApp;\n","/Users/amnaazhar/Desktop/threejs-journey/chapters/wavefields/src/colors.js",["70"],[],{"ruleId":"71","severity":1,"message":"72","line":19,"column":14,"nodeType":"73","messageId":"74","endLine":19,"endColumn":22},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"71","severity":1,"message":"79","line":16,"column":5,"nodeType":"73","messageId":"74","endLine":16,"endColumn":10},{"ruleId":"80","severity":1,"message":"81","line":188,"column":28,"nodeType":"82","messageId":"83","endLine":188,"endColumn":39,"suppressions":"84"},{"ruleId":"80","severity":1,"message":"81","line":214,"column":31,"nodeType":"82","messageId":"83","endLine":214,"endColumn":42,"suppressions":"85"},{"ruleId":"80","severity":1,"message":"81","line":215,"column":29,"nodeType":"82","messageId":"83","endLine":215,"endColumn":40,"suppressions":"86"},{"ruleId":"80","severity":1,"message":"81","line":227,"column":45,"nodeType":"82","messageId":"83","endLine":227,"endColumn":56,"suppressions":"87"},{"ruleId":"80","severity":1,"message":"81","line":228,"column":47,"nodeType":"82","messageId":"83","endLine":228,"endColumn":58,"suppressions":"88"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":1,"nodeType":"91","endLine":43,"endColumn":2},{"ruleId":"71","severity":1,"message":"72","line":19,"column":14,"nodeType":"73","messageId":"74","endLine":19,"endColumn":22},{"ruleId":"71","severity":1,"message":"92","line":9,"column":5,"nodeType":"73","messageId":"74","endLine":9,"endColumn":19},{"ruleId":"71","severity":1,"message":"93","line":317,"column":15,"nodeType":"73","messageId":"74","endLine":317,"endColumn":18},{"ruleId":"89","severity":1,"message":"90","line":1,"column":1,"nodeType":"91","endLine":43,"endColumn":2},"no-unused-vars","'onResize' is defined but never used.","Identifier","unusedVar","no-native-reassign",["94"],"no-negated-in-lhs",["95"],"'Clock' is defined but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral",["96"],["97"],["98"],["99"],["100"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'SphereGeometry' is defined but never used.","'gui' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"kind":"101","justification":"102"},{"kind":"101","justification":"102"},{"kind":"101","justification":"102"},{"kind":"101","justification":"102"},{"kind":"101","justification":"102"},"directive",""]